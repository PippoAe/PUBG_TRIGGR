<?xml version="1.0"?>
<doc>
    <assembly>
        <name>numl</name>
    </assembly>
    <members>
        <member name="T:numl.Math.Optimization.GradientDescent">
            <summary>
            Gradient Descent
            </summary>
        </member>
        <member name="M:numl.Math.Optimization.GradientDescent.Run(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector,System.Int32,System.Double,numl.Math.Functions.Cost.ICostFunction,System.Double,numl.Math.Functions.Regularization.IRegularizer)">
            <summary>
            Performs gradient descent to optomise theta parameters.
            </summary>
            <param name="theta">Initial Theta (Zeros)</param>
            <param name="x">Training set</param>
            <param name="y">Training labels</param>
            <param name="maxIterations">Maximum number of iterations to run gradient descent</param>
            <param name="learningRateAlpha">The learning rate (Alpha)</param>
            <param name="costFunction">Cost function to use for gradient descent</param>
            <param name="lambda">The regularization constant to apply</param>
            <param name="regularizer">The regularization function to apply</param>
            <returns></returns>
        </member>
        <member name="T:numl.Math.Functions.Cost.ICostFunction">
            <summary>
            Cost function interface
            </summary>
        </member>
        <member name="M:numl.Math.Functions.Cost.ICostFunction.ComputeCost(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector,System.Double,numl.Math.Functions.Regularization.IRegularizer)">
            <summary>
            Computes the cost of the current theta parameters against the known Y labels
            </summary>
            <param name="theta"></param>
            <param name="X"></param>
            <param name="y"></param>
            <param name="lambda">Regaularisation constant</param>
            <param name="regularizationTerm">Regularization method to apply</param>
            <returns></returns>
        </member>
        <member name="M:numl.Math.Functions.Cost.ICostFunction.ComputeGradient(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector,System.Double,numl.Math.Functions.Regularization.IRegularizer)">
            <summary>
            Computes the current gradient step direction towards the minima
            </summary>
            <param name="theta">Current theta parameters</param>
            <param name="X">Training set</param>
            <param name="y">Training labels</param>
            <param name="lambda">Regularisation constant</param>
            <param name="regularizationTerm">Regularization method to apply</param>
            <returns></returns>
        </member>
        <member name="T:numl.Math.Functions.Regularization.IRegularizer">
            <summary>
            Regularization function
            </summary>
        </member>
        <member name="M:numl.Math.Functions.Regularization.IRegularizer.Regularize(System.Double,numl.Math.LinearAlgebra.Vector,System.Int32,System.Double)">
            <summary>
            Applies regularization to the current cost
            </summary>
            <param name="j">Current cost</param>
            <param name="theta">Current theta</param>
            <param name="m">Training records</param>
            <param name="lambda">Regularization constant</param>
            <returns></returns>
        </member>
        <member name="M:numl.Math.Functions.Regularization.IRegularizer.Regularize(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector,System.Int32,System.Double)">
            <summary>
            Applies regularization to the current gradient
            </summary>
            <param name="theta">Current theta</param>
            <param name="gradient">Current gradient</param>
            <param name="m">Training records</param>
            <param name="lambda">Regularization constant</param>
        </member>
        <member name="T:numl.Math.Functions.Cost.LinearCostFunction">
            <summary>
            A Linear Cost Function.
            </summary>
        </member>
        <member name="M:numl.Math.Functions.Cost.LinearCostFunction.ComputeCost(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector,System.Double,numl.Math.Functions.Regularization.IRegularizer)">
            <summary>
            Compute the error cost of the given Theta parameter for the training and label sets
            </summary>
            <param name="theta">Learning Theta parameters</param>
            <param name="X">Training set</param>
            <param name="y">Training labels</param>
            <param name="lambda">Regularization constant</param>
            <param name="regularizer">Regularization term function.</param>
            <returns></returns>
        </member>
        <member name="M:numl.Math.Functions.Cost.LinearCostFunction.ComputeGradient(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector,System.Double,numl.Math.Functions.Regularization.IRegularizer)">
            <summary>
            Compute the error cost of the given Theta parameter for the training and label sets
            </summary>
            <param name="theta">Learning Theta parameters</param>
            <param name="X">Training set</param>
            <param name="y">Training labels</param>
            <param name="lambda">Regularisation constant</param>
            <param name="regularizer">Regularization term function.</param>
            <returns></returns>
        </member>
        <member name="T:numl.Math.Functions.Regularization.Regularization">
            <summary>
            Standard regularization
            </summary>
        </member>
        <member name="M:numl.Math.Functions.Regularization.Regularization.Regularize(System.Double,numl.Math.LinearAlgebra.Vector,System.Int32,System.Double)">
            <summary>
            Applies regularization to the current cost
            </summary>
            <param name="j">Current cost</param>
            <param name="theta">Current theta</param>
            <param name="m">Training records</param>
            <param name="lambda">Regularization constant</param>
            <returns></returns>
        </member>
        <member name="M:numl.Math.Functions.Regularization.Regularization.Regularize(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector,System.Int32,System.Double)">
            <summary>
            Applies regularization to the current gradient
            </summary>
            <param name="theta">Current theta</param>
            <param name="gradient">Current gradient</param>
            <param name="m">Training records</param>
            <param name="lambda">Regularization constant</param>
        </member>
        <member name="T:numl.Learner">
            <summary>
            Primary class for running model generators. It is designed to abstract the separation of
            training and test sets as well as best model selection.
            </summary>
        </member>
        <member name="M:numl.Learner.#cctor">
            <summary>Static constructor.</summary>
        </member>
        <member name="M:numl.Learner.Best(System.Collections.Generic.IEnumerable{numl.LearningModel})">
            <summary>Retrieve best model (or model with the highest accuracy)</summary>
            <param name="models">List of models.</param>
            <returns>Best Model.</returns>
        </member>
        <member name="M:numl.Learner.Learn(System.Collections.Generic.IEnumerable{System.Object},System.Double,System.Int32,numl.Supervised.IGenerator[])">
            <summary>
            Trains an arbitrary number of models on the provided examples by creating a separation of
            data based on training percentage. Each generator is rerun a predetermined amount of times.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="examples">Source data.</param>
            <param name="trainingPercentage">Data split percentage.</param>
            <param name="repeat">Number of repetitions per generator.</param>
            <param name="generators">Model generators used.</param>
            <returns>Best models for each generator.</returns>
        </member>
        <member name="M:numl.Learner.Learn(System.Data.DataTable,System.Double,System.Int32,numl.Supervised.IGenerator)">
            <summary>
            Trains a single model based on a generator a predefined number of times with the provided
            examples and data split and selects the best (or most accurate) model.
            </summary>
            <param name="examples">Source data (in datatable form)</param>
            <param name="trainingPercentage">Data split percentage.</param>
            <param name="repeat">Number of repetitions per generator.</param>
            <param name="generator">Model generator used.</param>
            <returns>Best model for provided generator.</returns>
        </member>
        <member name="M:numl.Learner.GetRows(System.Data.DataTable)">
            <summary>Gets the rows in this collection.</summary>
            <param name="table">The table.</param>
            <returns>
            An enumerator that allows foreach to be used to process the rows in this collection.
            </returns>
        </member>
        <member name="M:numl.Learner.Learn(System.Collections.Generic.IEnumerable{System.Object},System.Double,System.Int32,numl.Supervised.IGenerator)">
            <summary>
            Trains a single model based on a generator a predefined number of times with the provided
            examples and data split and selects the best (or most accurate) model.
            </summary>
            <param name="examples">Source data.</param>
            <param name="trainingPercentage">Data split percentage.</param>
            <param name="repeat">Number of repetitions per generator.</param>
            <param name="generator">Model generator used.</param>
            <returns>Best model for provided generator.</returns>
        </member>
        <member name="M:numl.Learner.Learn``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Int32,numl.Supervised.IGenerator)">
            <summary>
            Trains a single model based on a generator a predefined number of times with the provided
            examples and data split and selects the best (or most accurate) model.
            </summary>
            <param name="examples">Source data.</param>
            <param name="trainingPercentage">Data split percentage.</param>
            <param name="repeat">Number of repetitions per generator.</param>
            <param name="generator">Model generator used.</param>
            <returns>Best model for provided generator.</returns>
        </member>
        <member name="M:numl.Learner.GenerateModel(numl.Supervised.IGenerator,numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector,System.Collections.Generic.IEnumerable{System.Object},System.Double,System.Int32)">
            <summary>Generates a model.</summary>
            <param name="generator">Model generator used.</param>
            <param name="x">The Matrix to process.</param>
            <param name="y">The Vector to process.</param>
            <param name="examples">Source data.</param>
            <param name="trainingPct">The training pct.</param>
            <param name="total">Number of Examples</param>
            <returns>The model.</returns>
        </member>
        <member name="M:numl.Learner.GetTestExamples(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Gets test examples.</summary>
            <param name="slice">The slice.</param>
            <param name="examples">Source data.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:numl.Learner.GetTestPoints(System.Int32,System.Int32)">
            <summary>Gets the test points in this collection.</summary>
            <param name="testCount">Number of tests.</param>
            <param name="total">Number of.</param>
            <returns>
            An enumerator that allows foreach to be used to process the test points in this collection.
            </returns>
        </member>
        <member name="M:numl.Learner.GetTrainingPoints(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>Gets the training points in this collection.</summary>
            <param name="testPoints">The test points.</param>
            <param name="total">Number of.</param>
            <returns>
            An enumerator that allows foreach to be used to process the training points in this
            collection.
            </returns>
        </member>
        <member name="T:numl.LearningModel">
            <summary>Structure to hold generator, model, and accuracy information.</summary>
        </member>
        <member name="M:numl.LearningModel.ToString">
            <summary>Textual representation of structure.</summary>
            <returns>string.</returns>
        </member>
        <member name="P:numl.LearningModel.Generator">
            <summary>Generator used to create model.</summary>
            <value>The generator.</value>
        </member>
        <member name="P:numl.LearningModel.Model">
            <summary>Model created by generator.</summary>
            <value>The model.</value>
        </member>
        <member name="P:numl.LearningModel.Accuracy">
            <summary>Accuracy of model on test set.</summary>
            <value>The accuracy.</value>
        </member>
        <member name="T:numl.Math.Functions.Cost.LogisticCostFunction">
            <summary>
            
            </summary>
        </member>
        <member name="M:numl.Math.Functions.Cost.LogisticCostFunction.ComputeCost(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector,System.Double,numl.Math.Functions.Regularization.IRegularizer)">
            <summary>
            Compute the error cost of the given Theta parameter for the training and label sets
            </summary>
            <param name="theta">Learning Theta parameters</param>
            <param name="X">Training set</param>
            <param name="y">Training labels</param>
            <param name="lambda">Regularization constant</param>
            <param name="regularizer">Regularization term function.</param>
            <returns></returns>
        </member>
        <member name="M:numl.Math.Functions.Cost.LogisticCostFunction.ComputeGradient(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector,System.Double,numl.Math.Functions.Regularization.IRegularizer)">
            <summary>
            Compute the error gradient of the given Theta parameter for the training and label sets
            </summary>
            <param name="theta">Learning Theta parameters</param>
            <param name="X">Training set</param>
            <param name="y">Training labels</param>
            <param name="lambda">Regularisation constant</param>
            <param name="regularizer">Regularization term function.</param>
            <returns></returns>
        </member>
        <member name="T:numl.Math.Functions.Function">
            <summary>A function.</summary>
        </member>
        <member name="T:numl.Math.Functions.IFunction">
            <summary>Interface for function.</summary>
        </member>
        <member name="M:numl.Math.Functions.IFunction.Compute(System.Double)">
            <summary>Computes the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.Functions.IFunction.Derivative(System.Double)">
            <summary>Derivatives the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.Functions.IFunction.Compute(numl.Math.LinearAlgebra.Vector)">
            <summary>Computes the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.Functions.IFunction.Derivative(numl.Math.LinearAlgebra.Vector)">
            <summary>Derivatives the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.Functions.Function.exp(System.Double)">
            <summary>Exps.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.Functions.Function.pow(System.Double,System.Double)">
            <summary>Pows.</summary>
            <param name="x">The Vector to process.</param>
            <param name="a">The double to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.Functions.Function.Compute(System.Double)">
            <summary>Computes the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.Functions.Function.Derivative(System.Double)">
            <summary>Derivatives the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.Functions.Function.Compute(numl.Math.LinearAlgebra.Vector)">
            <summary>Computes the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.Functions.Function.Derivative(numl.Math.LinearAlgebra.Vector)">
            <summary>Derivatives the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="T:numl.Math.Functions.Ident">
            <summary>An identifier.</summary>
        </member>
        <member name="M:numl.Math.Functions.Ident.Compute(System.Double)">
            <summary>Computes the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.Functions.Ident.Derivative(System.Double)">
            <summary>Derivatives the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="T:numl.Math.Functions.Logistic">
            <summary>A logistic.</summary>
        </member>
        <member name="M:numl.Math.Functions.Logistic.Compute(System.Double)">
            <summary>Computes the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.Functions.Logistic.Derivative(System.Double)">
            <summary>Derivatives the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="T:numl.Math.Functions.Tanh">
            <summary>A hyperbolic tangent.</summary>
        </member>
        <member name="M:numl.Math.Functions.Tanh.Compute(System.Double)">
            <summary>Computes the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.Functions.Tanh.Derivative(System.Double)">
            <summary>Derivatives the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="T:numl.Math.Information.Entropy">
            <summary>
            This class calculates the Shannon Entropy of any given vector. It inherits from
            <see cref="T:numl.Math.Information.Impurity"/> class which provides additional functionality.
            </summary>
        </member>
        <member name="T:numl.Math.Information.Impurity">
            <summary>An impurity.</summary>
        </member>
        <member name="M:numl.Math.Information.Impurity.Calculate(numl.Math.LinearAlgebra.Vector)">
            <summary>Calculates impurity measure of x.</summary>
            <param name="x">The list in question.</param>
            <returns>Impurity measure.</returns>
        </member>
        <member name="M:numl.Math.Information.Impurity.SegmentedConditional(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>
            Calculates segmented conditional impurity of y | x When stipulating segments (s), X is broken
            up into s many segments therefore P(X=x_s) becomes a range probability rather than a fixed
            probability. In essence the average over H(Y|X = x) becomes SUM_s [ p_s * H(Y|X = x_s) ]. The
            values that were used to do the split are stored in the Splits member.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="y">Target impurity.</param>
            <param name="x">Conditioned impurity.</param>
            <param name="segments">Number of segments over x to condition upon.</param>
            <returns>Segmented conditional impurity measure.</returns>
        </member>
        <member name="M:numl.Math.Information.Impurity.SegmentedConditional(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector,System.Collections.Generic.IEnumerable{numl.Math.Range})">
            <summary>
            Calculates segmented conditional impurity of y | x When stipulating ranges (r), X is broken
            up into
            |r| many segments therefore P(X=x_r) becomes a range probability
            rather than a fixed probability. In essence the average over H(Y|X = x) becomes SUM_s [ p_r *
            H(Y|X = x_r) ]. The values that were used to do the split are stored in the Splits member.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="y">Target impurity.</param>
            <param name="x">Conditioned impurity.</param>
            <param name="ranges">Number of segments over x to condition upon.</param>
            <returns>Segmented conditional impurity measure.</returns>
        </member>
        <member name="M:numl.Math.Information.Impurity.Conditional(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>
            Calculates conditional impurity of y | x R(Y|X) is the average of H(Y|X = x) over all
            possible values X may take.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="y">Target impurity.</param>
            <param name="x">Conditioned impurity.</param>
            <returns>Conditional impurity measure.</returns>
        </member>
        <member name="M:numl.Math.Information.Impurity.Gain(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Calculates information gain of y | x.</summary>
            <param name="y">Target impurity.</param>
            <param name="x">Conditioned impurity.</param>
            <returns>Information gain using appropriate measure.</returns>
        </member>
        <member name="M:numl.Math.Information.Impurity.SegmentedGain(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>Segmented gain.</summary>
            <param name="y">Target impurity.</param>
            <param name="x">The list in question.</param>
            <param name="segments">Number of segments over x to condition upon.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.Information.Impurity.SegmentedGain(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector,System.Collections.Generic.IEnumerable{numl.Math.Range})">
            <summary>Segmented gain.</summary>
            <param name="y">Target impurity.</param>
            <param name="x">The list in question.</param>
            <param name="ranges">Number of segments over x to condition upon.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.Information.Impurity.RelativeGain(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Calculates relative information gain of y | x.</summary>
            <param name="y">Target impurity.</param>
            <param name="x">Conditioned impurity.</param>
            <returns>Relative information gain using appropriate measure.</returns>
        </member>
        <member name="M:numl.Math.Information.Impurity.SegmentedRelativeGain(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>
            Calculates relative information gain of y | x with a specified number of segments.
            </summary>
            <param name="y">Target impurity.</param>
            <param name="x">Conditioned impurity.</param>
            <param name="segments">Number of segments.</param>
            <returns>Relative segmented information gain using appropriate measure.</returns>
        </member>
        <member name="M:numl.Math.Information.Impurity.SegmentedRelativeGain(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector,System.Collections.Generic.IEnumerable{numl.Math.Range})">
            <summary>Calculates relative information gain of y | x with under specified ranges.</summary>
            <param name="y">Target impurity.</param>
            <param name="x">Conditioned impurity.</param>
            <param name="ranges">Range breakdown.</param>
            <returns>Relative segmented information gain using appropriate measure.</returns>
        </member>
        <member name="P:numl.Math.Information.Impurity.Segments">
            <summary>
            Calculated ranges used for segmented splits. This is generated when a segmented conditional
            impurity value is calculated.
            </summary>
            <value>The segments.</value>
        </member>
        <member name="P:numl.Math.Information.Impurity.Discrete">
            <summary>Gets or sets a value indicating whether the discrete.</summary>
            <value>true if discrete, false if not.</value>
        </member>
        <member name="M:numl.Math.Information.Entropy.Calculate(numl.Math.LinearAlgebra.Vector)">
            <summary>Calculates the Shannon Entropy of x.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The list in question.</param>
            <returns>Impurity measure.</returns>
        </member>
        <member name="T:numl.Math.Information.Error">
            <summary>
            This class calculates the Classification Error of any given vector. It inherits from
            <see cref="T:numl.Math.Information.Impurity"/> class which provides additional functionality.
            </summary>
        </member>
        <member name="M:numl.Math.Information.Error.Calculate(numl.Math.LinearAlgebra.Vector)">
            <summary>Calculates Classification Error of x.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The list in question.</param>
            <returns>Impurity measure.</returns>
        </member>
        <member name="T:numl.Math.Information.Gini">
            <summary>
            This class calculates the Gini Index of any given vector. It inherits from
            <see cref="T:numl.Math.Information.Impurity"/> class which provides additional functionality.
            </summary>
        </member>
        <member name="M:numl.Math.Information.Gini.Calculate(numl.Math.LinearAlgebra.Vector)">
            <summary>Calculates Gini Index of x.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The list in question.</param>
            <returns>Impurity measure.</returns>
        </member>
        <member name="T:numl.Math.Kernels.IKernel">
            <summary>
            In machine learning there is something called the Kernel Trick. In essence it allows for the
            mapping of observations in any general space into an inner product space (or Reproducing
            Kernel Hilbert Space). This trick thereby creates (or one hopes) linear separability in the
            augmented inner product space where simple linear classifiers perform extremely well.
            </summary>
        </member>
        <member name="M:numl.Math.Kernels.IKernel.Compute(numl.Math.LinearAlgebra.Matrix)">
            <summary>Computes the Kernel Matrix using the given input.</summary>
            <param name="m">Input Matrix.</param>
            <returns>Kernel Matrix.</returns>
        </member>
        <member name="M:numl.Math.Kernels.IKernel.Project(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Projects the vector <c>x</c> into the correspoding inner product space.</summary>
            <param name="m">Kernel Matrix.</param>
            <param name="x">Vector in original space.</param>
            <returns>Vector in inner product space.</returns>
        </member>
        <member name="T:numl.Math.Kernels.PolyKernel">
            <summary>Polynomial kernel of arbitrary dimension.</summary>
        </member>
        <member name="M:numl.Math.Kernels.PolyKernel.#ctor(System.Double)">
            <summary>ctor.</summary>
            <param name="dimension">Polynomial Kernel Dimension.</param>
        </member>
        <member name="M:numl.Math.Kernels.PolyKernel.Compute(numl.Math.LinearAlgebra.Matrix)">
            <summary>Computes polynomial kernel of the specified degree (in Dimension)</summary>
            <param name="m">Input Matrix.</param>
            <returns>Kernel Matrix.</returns>
        </member>
        <member name="M:numl.Math.Kernels.PolyKernel.Project(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Projects vector into polynomial kernel space.</summary>
            <param name="m">Polynomial Kernel Matrix.</param>
            <param name="x">Vector in original space.</param>
            <returns>Vector in polynomial kernel space.</returns>
        </member>
        <member name="P:numl.Math.Kernels.PolyKernel.Dimension">
            <summary>
            Specifies dimensionality of projection based on (1 + x.T y)^d where d is the dimension.
            </summary>
            <value>The dimension.</value>
        </member>
        <member name="T:numl.Math.Kernels.RBFKernel">
            <summary>
            The Radial Basis Function (RBF) Kernel is a projection into infinite dimensional space and
            acts as a pseudo similarity measure in the projected inner product space. It is governed by
            exp(||x - x'||2 / 2sigm^2)
            </summary>
        </member>
        <member name="M:numl.Math.Kernels.RBFKernel.#ctor(System.Double)">
            <summary>ctor.</summary>
            <param name="sigma">Input Parameter.</param>
        </member>
        <member name="M:numl.Math.Kernels.RBFKernel.Compute(numl.Math.LinearAlgebra.Matrix)">
            <summary>Computes RBF Kernel with provided free sigma parameter.</summary>
            <param name="m">Input Matrix.</param>
            <returns>RBF Kernel Matrix.</returns>
        </member>
        <member name="M:numl.Math.Kernels.RBFKernel.Project(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Projects vector into rbf kernel space.</summary>
            <param name="m">RBF Kernel Matrix.</param>
            <param name="x">Vector in original space.</param>
            <returns>Vector in RBF kernel space.</returns>
        </member>
        <member name="P:numl.Math.Kernels.RBFKernel.Sigma">
            <summary>RBF free parameter.</summary>
            <value>The sigma.</value>
        </member>
        <member name="T:numl.Math.LinearAlgebra.Evd">
            <summary>An evd.</summary>
        </member>
        <member name="F:numl.Math.LinearAlgebra.Evd.A">
            <summary>The Matrix to process.</summary>
        </member>
        <member name="F:numl.Math.LinearAlgebra.Evd.V">
            <summary>The Matrix to process.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Evd.#ctor(numl.Math.LinearAlgebra.Matrix)">
            <summary>Constructor.</summary>
            <param name="a">The int to process.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Evd.off(numl.Math.LinearAlgebra.Matrix)">
            <summary>Offs the given a.</summary>
            <param name="a">The int to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Evd.schur(numl.Math.LinearAlgebra.Matrix,System.Int32,System.Int32)">
            <summary>Schurs.</summary>
            <param name="a">The int to process.</param>
            <param name="p">The int to process.</param>
            <param name="q">The int to process.</param>
            <returns>A Tuple&lt;double,double&gt;</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Evd.sweep(System.Int32,System.Int32)">
            <summary>Sweeps.</summary>
            <param name="p">The int to process.</param>
            <param name="q">The int to process.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Evd.parallel">
            <summary>Parallels this object.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Evd.factorize">
            <summary>Factorizes this object.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Evd.compute(System.Double)">
            <summary>Computes the given tolerance.</summary>
            <param name="tol">(Optional) the tolerance.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Evd.sort">
            <summary>Sorts this object.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Evd.sqrt(System.Double)">
            <summary>Sqrts.</summary>
            <param name="x">The x coordinate.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Evd.sqr(System.Double)">
            <summary>Sqrs.</summary>
            <param name="x">The x coordinate.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Evd.min(System.Int32,System.Int32)">
            <summary>Determines the minimum of the given parameters.</summary>
            <param name="a">The int to process.</param>
            <param name="b">The int to process.</param>
            <returns>The minimum value.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Evd.max(System.Int32,System.Int32)">
            <summary>Determines the maximum of the given parameters.</summary>
            <param name="a">The int to process.</param>
            <param name="b">The int to process.</param>
            <returns>The maximum value.</returns>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Evd.Eigenvectors">
            <summary>Gets the eigenvectors.</summary>
            <value>The eigenvectors.</value>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Evd.Eigenvalues">
            <summary>Gets or sets the eigenvalues.</summary>
            <value>The eigenvalues.</value>
        </member>
        <member name="T:numl.Math.LinearAlgebra.Matrix">
            <summary>A matrix.</summary>
            <summary>A matrix.</summary>
            <summary>A matrix.</summary>
        </member>
        <member name="F:numl.Math.LinearAlgebra.Matrix._matrix">
            <summary>The matrix.</summary>
        </member>
        <member name="F:numl.Math.LinearAlgebra.Matrix._asTransposeRef">
            <summary>true to as transpose reference.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.#ctor">
            <summary>Used only internally.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.#ctor(System.Int32)">
            <summary>Create matrix n x n matrix.</summary>
            <param name="n">size.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>Create new n x d matrix.</summary>
            <param name="n">rows.</param>
            <param name="d">cols.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.#ctor(System.Double[0:,0:])">
            <summary>Create new matrix with prepopulated vals.</summary>
            <param name="m">initial matrix.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.#ctor(System.Double[][])">
            <summary>Create matrix n x n matrix.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="m">initial matrix.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Row(System.Int32)">
            <summary>Rows.</summary>
            <param name="i">Zero-based index of the.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Col(System.Int32)">
            <summary>Cols.</summary>
            <param name="i">Zero-based index of the.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.GetVector(System.Int32,System.Int32,System.Int32,numl.Math.LinearAlgebra.VectorType)">
            <summary>Gets a vector.</summary>
            <param name="index">Zero-based index of the.</param>
            <param name="from">Source for the.</param>
            <param name="to">to.</param>
            <param name="type">The type.</param>
            <returns>The vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Gets a matrix.</summary>
            <param name="d1">The first int.</param>
            <param name="d2">The second int.</param>
            <param name="n1">The first int.</param>
            <param name="n2">The second int.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.GetRows">
            <summary>Gets the rows in this collection.</summary>
            <returns>
            An enumerator that allows foreach to be used to process the rows in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.GetCols">
            <summary>Gets the cols in this collection.</summary>
            <returns>
            An enumerator that allows foreach to be used to process the cols in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.ToVector">
            <summary>Converts this object to a vector.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <returns>This object as a Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Transpose">
            <summary>Deep copy transpose.</summary>
            <returns>Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Copy">
            <summary>create deep copy of matrix.</summary>
            <returns>Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Equals(numl.Math.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:System.Object" />.
            </summary>
            <param name="m">initial matrix.</param>
            <param name="tol">Double to be compared.</param>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:System.Object" />; otherwise, false.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:System.Object" />; otherwise, false.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.ToArray">
            <summary>
            Performs a deep copy of the underlying matrix and returns a 2D array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Zeros(System.Int32)">
            <summary>Initial Zero Matrix (n by n)</summary>
            <param name="n">Size.</param>
            <returns>Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Identity(System.Int32,System.Int32)">
            <summary>n x d identity matrix.</summary>
            <param name="n">rows.</param>
            <param name="d">cols.</param>
            <returns>Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Rand(System.Int32,System.Int32,System.Double)">
            <summary>
            Generate a matrix n x d with numbers 0 less than x less than 1 drawn uniformly at random.
            </summary>
            <param name="n">rows.</param>
            <param name="d">cols.</param>
            <param name="min">(Optional) the minimum.</param>
            <returns>n x d Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Rand(System.Int32,System.Double)">
            <summary>
            Generate a matrix n x d with numbers 0 less than x less than 1 drawn uniformly at random.
            </summary>
            <param name="n">rows.</param>
            <param name="min">(Optional) the minimum.</param>
            <returns>n x d Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.NormRand(System.Int32,System.Int32,System.Double)">
            <summary>Normalise random.</summary>
            <param name="n">Size.</param>
            <param name="d">cols.</param>
            <param name="min">(Optional) the minimum.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.NormRand(System.Int32,System.Double)">
            <summary>Normalise random.</summary>
            <param name="n">Size.</param>
            <param name="min">(Optional) the minimum.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.NormRand(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>Normalise random.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="means">The means.</param>
            <param name="stdDev">The standard development.</param>
            <param name="n">Size.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Zeros(System.Int32,System.Int32)">
            <summary>Initial zero matrix.</summary>
            <param name="n">.</param>
            <param name="d">.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Identity(System.Int32)">
            <summary>n x n identity matrix.</summary>
            <param name="n">Size.</param>
            <returns>Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Create(System.Int32,System.Func{System.Double})">
            <summary>Creates a new Matrix.</summary>
            <param name="n">Size.</param>
            <param name="f">The Func&lt;int,int,double&gt; to process.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Create(System.Int32,System.Int32,System.Func{System.Double})">
            <summary>Creates a new Matrix.</summary>
            <param name="n">Size.</param>
            <param name="d">cols.</param>
            <param name="f">The Func&lt;int,int,double&gt; to process.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Create(System.Int32,System.Func{System.Int32,System.Int32,System.Double})">
            <summary>Creates a new Matrix.</summary>
            <param name="n">Size.</param>
            <param name="f">The Func&lt;int,int,double&gt; to process.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Double})">
            <summary>Creates a new Matrix.</summary>
            <param name="n">Size.</param>
            <param name="d">cols.</param>
            <param name="f">The Func&lt;int,int,double&gt; to process.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.SwapRow(System.Int32,System.Int32)">
            <summary>Swap row.</summary>
            <param name="from">Source for the.</param>
            <param name="to">to.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.SwapCol(System.Int32,System.Int32)">
            <summary>Swap col.</summary>
            <param name="from">Source for the.</param>
            <param name="to">to.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Swap(System.Int32,System.Int32,numl.Math.LinearAlgebra.VectorType)">
            <summary>Swaps.</summary>
            <param name="from">Source for the.</param>
            <param name="to">to.</param>
            <param name="t">.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Insert(numl.Math.LinearAlgebra.Vector,System.Int32,numl.Math.LinearAlgebra.VectorType,System.Boolean)">
            <summary>
            Returns a new Matrix with the Vector inserted at the specified position
            </summary>
            <param name="v">Vector to insert</param>
            <param name="index">The zero based row / column.</param>
            <param name="t">Vector orientation</param>
            <param name="insertAfter">Insert after or before the last row / column</param>
            <returns></returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Remove(System.Int32,numl.Math.LinearAlgebra.VectorType)">
            <summary>Removes this object.</summary>
            <param name="index">Zero-based index of the.</param>
            <param name="t">.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Normalize(numl.Math.LinearAlgebra.VectorType)">
            <summary>In place normalization. WARNING: WILL UPDATE MATRIX!</summary>
            <param name="t">.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Center(numl.Math.LinearAlgebra.VectorType)">
            <summary>In place centering. WARNING: WILL UPDATE MATRIX!</summary>
            <param name="t">.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable
            interface, you should return null (Nothing in Visual Basic) from this method, and instead, if
            specifying a custom schema is required, apply the
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the
            object that is produced by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
            method and consumed by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
            method.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is
            deserialized.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Save(System.String)">
            <summary>Saves the given stream.</summary>
            <param name="file">The file to load.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Save(System.IO.Stream)">
            <summary>Saves the given stream.</summary>
            <param name="stream">The stream to load.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Load(System.String)">
            <summary>Loads the given stream.</summary>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the requested file is not present.</exception>
            <param name="file">The file to load.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Load(System.IO.Stream)">
            <summary>Loads the given stream.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="stream">The stream to load.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Implicit(System.Double[0:,0:])~numl.Math.LinearAlgebra.Matrix">
            <summary>Matrix casting operator.</summary>
            <param name="m">Matrix.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Implicit(System.Int32[0:,0:])~numl.Math.LinearAlgebra.Matrix">
            <summary>Matrix casting operator.</summary>
            <param name="m">Matrix.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Equality(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Matrix)">
            <summary>Equality operator.</summary>
            <param name="m1">The first Matrix.</param>
            <param name="m2">The second Matrix.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Inequality(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Matrix)">
            <summary>Inequality operator.</summary>
            <param name="m1">The first Matrix.</param>
            <param name="m2">The second Matrix.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Addition(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Matrix)">
            <summary>Addition operator.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="m1">The first Matrix.</param>
            <param name="m2">The second Matrix.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Subtraction(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Matrix)">
            <summary>Subtraction operator.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="m1">The first Matrix.</param>
            <param name="m2">The second Matrix.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Addition(numl.Math.LinearAlgebra.Matrix,System.Double)">
            <summary>In memory addition of double to matrix.</summary>
            <param name="m">Matrix.</param>
            <param name="s">double.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Addition(System.Double,numl.Math.LinearAlgebra.Matrix)">
            <summary>Addition operator.</summary>
            <param name="s">The double to process.</param>
            <param name="m">The Matrix to process.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Subtraction(numl.Math.LinearAlgebra.Matrix,System.Double)">
            <summary>Subtract double from every element in the Matrix.</summary>
            <param name="m">Matrix.</param>
            <param name="s">Double.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Subtraction(System.Double,numl.Math.LinearAlgebra.Matrix)">
            <summary>Subtraction operator.</summary>
            <param name="s">The double to process.</param>
            <param name="m">The Matrix to process.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Multiply(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Matrix)">
            <summary>matrix multiplication.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="m1">left hand side.</param>
            <param name="m2">right hand side.</param>
            <returns>matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Multiply(System.Double,numl.Math.LinearAlgebra.Matrix)">
            <summary>Scalar matrix multiplication.</summary>
            <param name="s">scalar.</param>
            <param name="m">matrix.</param>
            <returns>matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Multiply(numl.Math.LinearAlgebra.Matrix,System.Double)">
            <summary>reverse.</summary>
            <param name="m">.</param>
            <param name="s">.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Multiply(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Multiplication operator.</summary>
            <param name="m">The Matrix to process.</param>
            <param name="v">The Vector to process.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Multiply(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Matrix)">
            <summary>Multiplication operator.</summary>
            <param name="v">The Vector to process.</param>
            <param name="m">The Matrix to process.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Division(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>
            Solves Ax = b for x If A is not square or the system is overdetermined, this operation solves
            the linear least squares A.T * A x = A.T * b.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="A">Matrix A.</param>
            <param name="b">Vector b.</param>
            <returns>x.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_Division(numl.Math.LinearAlgebra.Matrix,System.Double)">
            <summary>Division operator.</summary>
            <param name="A">The Matrix to process.</param>
            <param name="b">The double to process.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.op_ExclusiveOr(numl.Math.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Matrix inverse using pivoted Gauss-Jordan elimination with partial pivoting
            See:http://www.cse.illinois.edu/iem/linear_equations/gauss_jordan/for python implementaion.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="mat">Matrix.</param>
            <param name="n">-1.</param>
            <returns>Inverse (or exception if matrix is singular)</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Inverse">
            <summary>
            Creates an inverse of the current matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Inverse(numl.Math.LinearAlgebra.Matrix)">
            <summary>Inverses the given matrix.</summary>
            <exception cref="T:numl.Math.LinearAlgebra.SingularMatrixException">Thrown when a Singular Matrix error condition occurs.</exception>
            <param name="mat">Matrix.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Trace(numl.Math.LinearAlgebra.Matrix)">
            <summary>Computes the trace of a matrix.</summary>
            <param name="m">Input Matrix.</param>
            <returns>trace.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Sum(numl.Math.LinearAlgebra.Matrix)">
            <summary>Computes the sum of every element of the matrix.</summary>
            <param name="m">Input Matrix.</param>
            <returns>sum.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Sum(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>
            Computes the sum of either the rows or columns of a matrix and returns a vector.
            </summary>
            <param name="m">Input Matrix.</param>
            <param name="t">Row or Column sum.</param>
            <returns>Vector Sum.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Sum(numl.Math.LinearAlgebra.Matrix,System.Int32,numl.Math.LinearAlgebra.VectorType)">
            <summary>Computes the sum of every element of the matrix.</summary>
            <param name="m">Input Matrix.</param>
            <param name="i">Zero-based index of the.</param>
            <param name="t">Row or Column sum.</param>
            <returns>sum.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Norm(numl.Math.LinearAlgebra.Matrix,System.Double)">
            <summary>Standard Matrix Norm.</summary>
            <param name="A">Input Matrix.</param>
            <param name="p">The double to process.</param>
            <returns>Standard Norm (double)</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.FrobeniusNorm(numl.Math.LinearAlgebra.Matrix)">
            <summary>Matrix Frobenius Norm.</summary>
            <param name="A">Input Matrix.</param>
            <returns>Frobenius Norm (double)</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Evd(numl.Math.LinearAlgebra.Matrix)">
            <summary>Eigen Decomposition.</summary>
            <param name="A">Input Matrix.</param>
            <returns>Tuple(Eigen Values, Eigen Vectors)</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.SVD(numl.Math.LinearAlgebra.Matrix)">
            <summary>Singular Value Decomposition.</summary>
            <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            <param name="A">Input Matrix.</param>
            <returns>Tuple(Matrix U, Vector S, Matrix V)</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.LU(numl.Math.LinearAlgebra.Matrix)">
            <summary>NOT IMPLEMENTED!</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="A">.</param>
            <returns>A Tuple&lt;Matrix,Matrix,Matrix&gt;</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Pivot(numl.Math.LinearAlgebra.Matrix)">
            <summary>Pivots the given m.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="M">The Matrix to process.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Cholesky(numl.Math.LinearAlgebra.Matrix)">
            <summary>Cholesky Factorization of a Matrix.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <exception cref="T:numl.Math.LinearAlgebra.SingularMatrixException">Thrown when a Singular Matrix error condition occurs.</exception>
            <param name="m">Input Matrix.</param>
            <returns>Cholesky Faxtorization (R.T would be other matrix)</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Round(numl.Math.LinearAlgebra.Matrix,System.Int32)">
            <summary>Matrix Roundoff.</summary>
            <param name="m">Input Matrix.</param>
            <param name="decimals">(Optional) Max number of decimals (default 0 - integral members)</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.QR(numl.Math.LinearAlgebra.Matrix)">
            <summary>Modified Gram-Schmidt QR Factorization.</summary>
            <param name="A">Matrix A.</param>
            <returns>Tuple(Q, R)</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Backward(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Backwards.</summary>
            <param name="A">Input Matrix.</param>
            <param name="b">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Forward(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Forwards.</summary>
            <param name="A">Input Matrix.</param>
            <param name="b">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Dot(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Dot product between a matrix and a vector.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">Matrix x.</param>
            <param name="v">Vector v.</param>
            <returns>Vector dot product.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Dot(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Matrix)">
            <summary>Dot product between a matrix and a vector.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="v">Vector v.</param>
            <param name="x">Matrix x.</param>
            <returns>Vector dot product.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Mean(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>Determines the mean of the given parameters.</summary>
            <param name="source">Source for the.</param>
            <param name="t">Row or Column sum.</param>
            <returns>The mean value.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.StdDev(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>
            Computes the standard deviation of the given matrix
            </summary>
            <param name="source"></param>
            <param name="t">Use column or row (default: Col)</param>
            <returns></returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Max(numl.Math.LinearAlgebra.Matrix)">
            <summary>Determines the maximum of the given parameters.</summary>
            <param name="source">Source for the.</param>
            <returns>The maximum value.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Min(numl.Math.LinearAlgebra.Matrix)">
            <summary>Determines the minimum of the given parameters.</summary>
            <param name="source">Source for the.</param>
            <returns>The minimum value.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Covariance(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>Covariances.</summary>
            <param name="source">Source for the.</param>
            <param name="t">(Optional) Row or Column sum.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.CovarianceDiag(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>Covariance diagram.</summary>
            <param name="source">Source for the.</param>
            <param name="t">(Optional) Row or Column sum.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Correlation(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>Correlations.</summary>
            <param name="source">Source for the.</param>
            <param name="t">(Optional) Row or Column sum.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Reverse(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>Enumerates reverse in this collection.</summary>
            <param name="source">Source for the.</param>
            <param name="t">(Optional) Row or Column sum.</param>
            <returns>
            An enumerator that allows foreach to be used to process reverse in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Indices(numl.Math.LinearAlgebra.Matrix,System.Func{numl.Math.LinearAlgebra.Vector,System.Boolean})">
            <summary>Enumerates indices in this collection.</summary>
            <param name="source">Source for the.</param>
            <param name="f">The Func&lt;Vector,bool&gt; to process.</param>
            <returns>
            An enumerator that allows foreach to be used to process indices in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Indices(numl.Math.LinearAlgebra.Matrix,System.Func{numl.Math.LinearAlgebra.Vector,System.Boolean},numl.Math.LinearAlgebra.VectorType)">
            <summary>Enumerates indices in this collection.</summary>
            <param name="source">Source for the.</param>
            <param name="f">The Func&lt;Vector,bool&gt; to process.</param>
            <param name="t">Row or Column sum.</param>
            <returns>
            An enumerator that allows foreach to be used to process indices in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Stack(numl.Math.LinearAlgebra.VectorType,numl.Math.LinearAlgebra.Vector[])">
            <summary>Stack a set of vectors into a matrix.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="type">.</param>
            <param name="vectors">.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Stack(numl.Math.LinearAlgebra.Vector[])">
            <summary>Stack a set of vectors into a matrix.</summary>
            <param name="vectors">.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.VStack(numl.Math.LinearAlgebra.Vector[])">
            <summary>Stacks.</summary>
            <param name="vectors">.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Stack(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Matrix)">
            <summary>Stack a set of vectors into a matrix.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="m">Input Matrix.</param>
            <param name="t">Row or Column sum.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.VStack(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Matrix)">
            <summary>Stacks.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="m">Input Matrix.</param>
            <param name="t">Row or Column sum.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Slice(numl.Math.LinearAlgebra.Matrix,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Slices.</summary>
            <param name="m">Input Matrix.</param>
            <param name="indices">The indices.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Slice(numl.Math.LinearAlgebra.Matrix,System.Collections.Generic.IEnumerable{System.Int32},numl.Math.LinearAlgebra.VectorType)">
            <summary>Slices.</summary>
            <param name="m">Input Matrix.</param>
            <param name="indices">The indices.</param>
            <param name="t">Row or Column sum.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Extract(numl.Math.LinearAlgebra.Matrix,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Extracts this object.</summary>
            <param name="m">Input Matrix.</param>
            <param name="x">Matrix x.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="safe">(Optional) true to safe.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Diag(numl.Math.LinearAlgebra.Matrix)">
            <summary>Diagrams the given m.</summary>
            <param name="m">Input Matrix.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Stats(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>Statistics.</summary>
            <param name="x">Matrix x.</param>
            <param name="t">(Optional) Row or Column sum.</param>
            <returns>A Matrix[].</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Matrix.Det(numl.Math.LinearAlgebra.Matrix)">
            <summary>Dets the given x coordinate.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">Matrix x.</param>
            <returns>A double.</returns>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Matrix.Rows">
            <summary>Gets or sets the rows.</summary>
            <value>The rows.</value>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Matrix.Cols">
            <summary>Gets or sets the cols.</summary>
            <value>The cols.</value>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Matrix.Item(System.Int32,System.Int32)">
            <summary>Accessor.</summary>
            <param name="i">Row.</param>
            <param name="j">Column.</param>
            <returns>The indexed item.</returns>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Matrix.Item(System.Int32)">
            <summary>Returns row vector specified at index i.</summary>
            <param name="i">row index.</param>
            <returns>The indexed item.</returns>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Matrix.Item(System.Int32,numl.Math.LinearAlgebra.VectorType)">
            <summary>returns col/row vector at index j.</summary>
            <param name="i">Col/Row.</param>
            <param name="t">Row or Column.</param>
            <returns>Vector.</returns>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Matrix.Item(System.Func{System.Double,System.Boolean})">
            <summary>Indexer to set items within this collection using array index syntax.</summary>
            <param name="f">The Func&lt;double,bool&gt; to process.</param>
            <returns>The indexed item.</returns>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Matrix.Item(System.Func{numl.Math.LinearAlgebra.Vector,System.Boolean},numl.Math.LinearAlgebra.VectorType)">
            <summary>Indexer to get items within this collection using array index syntax.</summary>
            <param name="f">The Func&lt;Vector,bool&gt; to process.</param>
            <param name="t">The VectorType to process.</param>
            <returns>The indexed item.</returns>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Matrix.T">
            <summary>
            Returns read-only transpose (uses matrix reference to save space)
            It will throw an exception if there is an attempt to write to the matrix.
            </summary>
            <value>The t.</value>
        </member>
        <member name="T:numl.Math.LinearAlgebra.MatrixExtensions">
            <summary>A matrix extensions.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Stack(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Matrix)">
            <summary>A Matrix extension method that stacks.</summary>
            <param name="m">Matrix.</param>
            <param name="t">Row or Column sum.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.VStack(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Matrix)">
            <summary>A Matrix extension method that stacks.</summary>
            <param name="m">Matrix.</param>
            <param name="t">Row or Column sum.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Mean(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>
            A Matrix extension method that determines the mean of the given parameters.
            </summary>
            <param name="source">The source to act on.</param>
            <param name="t">Row or Column sum.</param>
            <returns>The mean value.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.StdDev(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>
            Computes the standard deviation of the given matrix
            </summary>
            <param name="source"></param>
            <param name="t">Return a Row or Column vector</param>
            <returns></returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Max(numl.Math.LinearAlgebra.Matrix)">
            <summary>
            A Matrix extension method that determines the maximum of the given parameters.
            </summary>
            <param name="source">The source to act on.</param>
            <returns>The maximum value.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Min(numl.Math.LinearAlgebra.Matrix)">
            <summary>
            A Matrix extension method that determines the minimum of the given parameters.
            </summary>
            <param name="source">The source to act on.</param>
            <returns>The minimum value.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Covariance(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>A Matrix extension method that covariances.</summary>
            <param name="source">The source to act on.</param>
            <param name="t">(Optional) Row or Column sum.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.CovarianceDiag(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>A Matrix extension method that covariance diagram.</summary>
            <param name="source">The source to act on.</param>
            <param name="t">(Optional) Row or Column sum.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Correlation(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>A Matrix extension method that correlations.</summary>
            <param name="source">The source to act on.</param>
            <param name="t">(Optional) Row or Column sum.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Reverse(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>Enumerates reverse in this collection.</summary>
            <param name="source">The source to act on.</param>
            <param name="t">(Optional) Row or Column sum.</param>
            <returns>
            An enumerator that allows foreach to be used to process reverse in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Indices(numl.Math.LinearAlgebra.Matrix,System.Func{numl.Math.LinearAlgebra.Vector,System.Boolean})">
            <summary>Enumerates indices in this collection.</summary>
            <param name="source">The source to act on.</param>
            <param name="f">The Func&lt;Vector,bool&gt; to process.</param>
            <returns>
            An enumerator that allows foreach to be used to process indices in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Indices(numl.Math.LinearAlgebra.Matrix,System.Func{numl.Math.LinearAlgebra.Vector,System.Boolean},numl.Math.LinearAlgebra.VectorType)">
            <summary>Enumerates indices in this collection.</summary>
            <param name="source">The source to act on.</param>
            <param name="f">The Func&lt;Vector,bool&gt; to process.</param>
            <param name="t">Row or Column sum.</param>
            <returns>
            An enumerator that allows foreach to be used to process indices in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Slice(numl.Math.LinearAlgebra.Matrix,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>A Matrix extension method that slices.</summary>
            <param name="m">Matrix.</param>
            <param name="indices">The indices.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Slice(numl.Math.LinearAlgebra.Matrix,System.Collections.Generic.IEnumerable{System.Int32},numl.Math.LinearAlgebra.VectorType)">
            <summary>A Matrix extension method that slices.</summary>
            <param name="m">Matrix.</param>
            <param name="indices">The indices.</param>
            <param name="t">Row or Column sum.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Extract(numl.Math.LinearAlgebra.Matrix,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>A Matrix extension method that extracts this object.</summary>
            <param name="m">Matrix.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="safe">(Optional) true to safe.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Cholesky(numl.Math.LinearAlgebra.Matrix)">
            <summary>A Matrix extension method that choleskies the given m.</summary>
            <param name="m">Matrix.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Round(numl.Math.LinearAlgebra.Matrix,System.Int32)">
            <summary>A Matrix extension method that rounds.</summary>
            <param name="m">Matrix.</param>
            <param name="decimals">(Optional) the decimals.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Norm(numl.Math.LinearAlgebra.Matrix)">
            <summary>A Matrix extension method that normals.</summary>
            <param name="m">Matrix.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Norm(numl.Math.LinearAlgebra.Matrix,System.Double)">
            <summary>A Matrix extension method that normals.</summary>
            <param name="m">Matrix.</param>
            <param name="p">The double to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Eigs(numl.Math.LinearAlgebra.Matrix)">
            <summary>A Matrix extension method that eigs the given m.</summary>
            <param name="m">Matrix.</param>
            <returns>A Tuple&lt;Vector,Matrix&gt;</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.SVD(numl.Math.LinearAlgebra.Matrix)">
            <summary>A Matrix extension method that svds the given m.</summary>
            <param name="m">Matrix.</param>
            <returns>A Tuple&lt;Matrix,Vector,Matrix&gt;</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Trace(numl.Math.LinearAlgebra.Matrix)">
            <summary>Computes the trace of a matrix.</summary>
            <param name="m">Matrix.</param>
            <returns>trace.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Sum(numl.Math.LinearAlgebra.Matrix)">
            <summary>
            Computes the sum of either the rows or columns of a matrix and returns a vector.
            </summary>
            <param name="m">Matrix.</param>
            <returns>Vector Sum.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Sum(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>
            Computes the sum of either the rows or columns of a matrix and returns a vector.
            </summary>
            <param name="m">Matrix.</param>
            <param name="t">Row or Column sum.</param>
            <returns>Vector Sum.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Sum(numl.Math.LinearAlgebra.Matrix,System.Int32,numl.Math.LinearAlgebra.VectorType)">
            <summary>
            Computes the sum of either the rows or columns of a matrix and returns a vector.
            </summary>
            <param name="m">Matrix.</param>
            <param name="i">Zero-based index of the.</param>
            <param name="t">Row or Column sum.</param>
            <returns>Vector Sum.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Diag(numl.Math.LinearAlgebra.Matrix)">
            <summary>A Matrix extension method that diagrams the given m.</summary>
            <param name="m">Matrix.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Stats(numl.Math.LinearAlgebra.Matrix)">
            <summary>A Matrix extension method that statistics.</summary>
            <param name="m">Matrix.</param>
            <returns>A Matrix[].</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Stats(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>A Matrix extension method that statistics.</summary>
            <param name="m">Matrix.</param>
            <param name="t">Row or Column sum.</param>
            <returns>A Matrix[].</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.MatrixExtensions.Det(numl.Math.LinearAlgebra.Matrix)">
            <summary>
            computes matrix determinant NOTE: currently using cholesky factorization to save time so non
            symmetric positive semi-definite matrices will cause problems...
            </summary>
            <param name="m">Matrix.</param>
            <returns>Determinant.</returns>
        </member>
        <member name="T:numl.Math.LinearAlgebra.SingularMatrixException">
            <summary>Exception for signalling singular matrix errors.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.SingularMatrixException.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.SingularMatrixException.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:numl.Math.LinearAlgebra.Vector">
            <summary>A vector.</summary>
            <summary>A vector.</summary>
            <summary>A vector.</summary>
        </member>
        <member name="F:numl.Math.LinearAlgebra.Vector._vector">
            <summary>The vector.</summary>
        </member>
        <member name="F:numl.Math.LinearAlgebra.Vector._asMatrixRef">
            <summary>true to as matrix reference.</summary>
        </member>
        <member name="F:numl.Math.LinearAlgebra.Vector._asCol">
            <summary>true to as col.</summary>
        </member>
        <member name="F:numl.Math.LinearAlgebra.Vector._matrix">
            <summary>The matrix.</summary>
        </member>
        <member name="F:numl.Math.LinearAlgebra.Vector._staticIdx">
            <summary>Zero-based index of the static.</summary>
        </member>
        <member name="F:numl.Math.LinearAlgebra.Vector._transpose">
            <summary>The transpose.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.#ctor(System.Double[][],System.Int32,System.Boolean)">
            <summary>
            this is when the values are actually referencing a vector in an existing matrix.
            </summary>
            <param name="m">private matrix vals.</param>
            <param name="idx">static col reference.</param>
            <param name="asCol">(Optional) true to as col.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.#ctor">
            <summary>
            Constructor that prevents a default instance of this class from being created.
            </summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.#ctor(System.Int32)">
            <summary>
            this is when the values are actually referencing a vector in an existing matrix.
            </summary>
            <param name="n">The int to process.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            this is when the values are actually referencing a vector in an existing matrix.
            </summary>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.#ctor(System.Double[])">
            <summary>
            this is when the values are actually referencing a vector in an existing matrix.
            </summary>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Copy">
            <summary>Copies this object.</summary>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.ToArray">
            <summary>Convert this object into an array representation.</summary>
            <returns>An array that represents the data in this object.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.ToMatrix">
            <summary>Converts a t to a matrix.</summary>
            <returns>t as a Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.ToMatrix(numl.Math.LinearAlgebra.VectorType)">
            <summary>Converts a t to a matrix.</summary>
            <param name="t">The VectorType to process.</param>
            <returns>t as a Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:System.Object" />; otherwise, false.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.MaxIndex(System.Int32)">
            <summary>Maximum index.</summary>
            <param name="startAt">The start at.</param>
            <returns>An int.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable
            interface, you should return null (Nothing in Visual Basic) from this method, and instead, if
            specifying a custom schema is required, apply the
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the
            object that is produced by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
            method and consumed by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
            method.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is
            deserialized.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is
            serialized.</param>
        </member>
        <member name="F:numl.Math.LinearAlgebra.Vector.Empty">
            <summary>The empty.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Create(System.Int32,System.Func{System.Double})">
            <summary>Creates a new Vector.</summary>
            <param name="length">The length.</param>
            <param name="f">The Func&lt;int,double&gt; to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Create(System.Int32,System.Func{System.Int32,System.Double})">
            <summary>Creates a new Vector.</summary>
            <param name="length">The length.</param>
            <param name="f">The Func&lt;int,double&gt; to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Range(System.Int32,System.Int32)">
            <summary>Ranges.</summary>
            <param name="s">The int to process.</param>
            <param name="e">(Optional) the int to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.GetEnumerator">
            <summary>Gets the enumerator.</summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the enumerator.</summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Implicit(numl.Math.LinearAlgebra.Vector)~System.Double[]">
            <summary>double[] casting operator.</summary>
            <param name="v">The Vector to process.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Implicit(System.Double[])~numl.Math.LinearAlgebra.Vector">
            <summary>Vector casting operator.</summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Implicit(System.Int32[])~numl.Math.LinearAlgebra.Vector">
            <summary>Vector casting operator.</summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Implicit(System.Single[])~numl.Math.LinearAlgebra.Vector">
            <summary>Vector casting operator.</summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Equality(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Equality operator.</summary>
            <param name="one">The one.</param>
            <param name="two">The two.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Inequality(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Inequality operator.</summary>
            <param name="one">The one.</param>
            <param name="two">The two.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Subtraction(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Subtraction operator.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="one">The one.</param>
            <param name="two">The two.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Subtraction(numl.Math.LinearAlgebra.Vector,System.Double)">
            <summary>Subtraction operator.</summary>
            <param name="v">The Vector to process.</param>
            <param name="s">The double to process.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Subtraction(System.Double,numl.Math.LinearAlgebra.Vector)">
            <summary>Subtraction operator.</summary>
            <param name="s">The double to process.</param>
            <param name="v">The Vector to process.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Addition(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Addition operator.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="one">The one.</param>
            <param name="two">The two.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Addition(numl.Math.LinearAlgebra.Vector,System.Double)">
            <summary>Addition operator.</summary>
            <param name="v">The Vector to process.</param>
            <param name="s">The double to process.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Addition(System.Double,numl.Math.LinearAlgebra.Vector)">
            <summary>Addition operator.</summary>
            <param name="s">The double to process.</param>
            <param name="v">The Vector to process.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_UnaryNegation(numl.Math.LinearAlgebra.Vector)">
            <summary>Negation operator.</summary>
            <param name="one">The one.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Multiply(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Multiplication operator.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="one">The one.</param>
            <param name="two">The two.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Multiply(numl.Math.LinearAlgebra.Vector,System.Double)">
            <summary>Multiplication operator.</summary>
            <param name="one">The one.</param>
            <param name="two">The two.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Multiply(numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>Multiplication operator.</summary>
            <param name="one">The one.</param>
            <param name="two">The two.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Multiply(System.Double,numl.Math.LinearAlgebra.Vector)">
            <summary>Multiplication operator.</summary>
            <param name="one">The one.</param>
            <param name="two">The two.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Division(numl.Math.LinearAlgebra.Vector,System.Double)">
            <summary>Division operator.</summary>
            <param name="one">The one.</param>
            <param name="two">The two.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_Division(numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>Division operator.</summary>
            <param name="one">The one.</param>
            <param name="two">The two.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.op_ExclusiveOr(numl.Math.LinearAlgebra.Vector,System.Double)">
            <summary>Bitwise 'exclusive or' operator.</summary>
            <param name="one">The one.</param>
            <param name="power">The power.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Prod(numl.Math.LinearAlgebra.Vector)">
            <summary>Products the given v.</summary>
            <param name="v">A variable-length parameters list containing v.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Sum(numl.Math.LinearAlgebra.Vector)">
            <summary>Sums the given v.</summary>
            <param name="v">A variable-length parameters list containing v.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Outer(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Outers.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The Vector to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Exp(numl.Math.LinearAlgebra.Vector)">
            <summary>Exponents the given v.</summary>
            <param name="v">A variable-length parameters list containing v.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Log(numl.Math.LinearAlgebra.Vector)">
            <summary>Logs the given v.</summary>
            <param name="v">A variable-length parameters list containing v.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Calc(numl.Math.LinearAlgebra.Vector,System.Func{System.Double,System.Double})">
            <summary>Calcs.</summary>
            <param name="v">A variable-length parameters list containing v.</param>
            <param name="f">The Func&lt;int,double,double&gt; to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Calc(numl.Math.LinearAlgebra.Vector,System.Func{System.Int32,System.Double,System.Double})">
            <summary>Calcs.</summary>
            <param name="v">A variable-length parameters list containing v.</param>
            <param name="f">The Func&lt;int,double,double&gt; to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Ones(System.Int32)">
            <summary>Ones.</summary>
            <param name="n">The int to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Zeros(System.Int32)">
            <summary>Zeros.</summary>
            <param name="n">The int to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Rand(System.Int32)">
            <summary>Rands.</summary>
            <param name="n">The int to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.NormRand(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>Normalise random.</summary>
            <param name="n">The int to process.</param>
            <param name="mean">(Optional) the mean.</param>
            <param name="stdDev">(Optional) the standard development.</param>
            <param name="precision">(Optional) the precision.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Dot(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Dots.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="one">The one.</param>
            <param name="two">The two.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Norm(numl.Math.LinearAlgebra.Vector)">
            <summary>Normals.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Norm(numl.Math.LinearAlgebra.Vector,System.Double)">
            <summary>Normals.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The Vector to process.</param>
            <param name="p">The double to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Diag(numl.Math.LinearAlgebra.Vector)">
            <summary>Diags.</summary>
            <param name="v">A variable-length parameters list containing v.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Diag(numl.Math.LinearAlgebra.Vector,System.Int32,System.Int32)">
            <summary>Diags.</summary>
            <param name="v">A variable-length parameters list containing v.</param>
            <param name="n">The int to process.</param>
            <param name="d">The int to process.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Round(numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>Rounds.</summary>
            <param name="v">A variable-length parameters list containing v.</param>
            <param name="decimals">(Optional) the decimals.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.Combine(numl.Math.LinearAlgebra.Vector[])">
            <summary>Combines the given v.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="v">A variable-length parameters list containing v.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.SortOrder(numl.Math.LinearAlgebra.Vector)">
            <summary>Sort order.</summary>
            <param name="vector">The vector.</param>
            <returns>The sorted order.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.ContainsNaN(numl.Math.LinearAlgebra.Vector)">
            <summary>Query if 'vector' contains na n.</summary>
            <param name="vector">The vector.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Vector.IsNaN(numl.Math.LinearAlgebra.Vector)">
            <summary>Query if 'vector' is na n.</summary>
            <param name="vector">The vector.</param>
            <returns>true if na n, false if not.</returns>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Vector.Item(System.Predicate{System.Double})">
            <summary>Indexer to set items within this collection using array index syntax.</summary>
            <param name="f">The Predicate&lt;double&gt; to process.</param>
            <returns>The indexed item.</returns>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Vector.Item(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Indexer to set items within this collection using array index syntax.</summary>
            <param name="slice">The slice.</param>
            <returns>The indexed item.</returns>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Vector.Item(System.Int32)">
            <summary>
            Indexer to get or set items within this collection using array index syntax.
            </summary>
            <param name="i">Zero-based index of the entry to access.</param>
            <returns>The indexed item.</returns>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Vector.Length">
            <summary>Gets the length.</summary>
            <value>The length.</value>
        </member>
        <member name="P:numl.Math.LinearAlgebra.Vector.T">
            <summary>Gets the t.</summary>
            <value>The t.</value>
        </member>
        <member name="T:numl.Math.LinearAlgebra.VectorExtensions">
            <summary>A vector extensions.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Calc(numl.Math.LinearAlgebra.Vector,System.Func{System.Double,System.Double})">
            <summary>A Vector extension method that calcs.</summary>
            <param name="v">The v to act on.</param>
            <param name="f">The Func&lt;T,double&gt; to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Sum(numl.Math.LinearAlgebra.Vector)">
            <summary>An IEnumerable&lt;Vector&gt; extension method that sums the given source.</summary>
            <param name="v">The v to act on.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Log(numl.Math.LinearAlgebra.Vector)">
            <summary>
            Returns the Log of the current Vector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Prod(numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that products the given v.</summary>
            <param name="v">The v to act on.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Outer(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that outers.</summary>
            <param name="x">The x to act on.</param>
            <param name="y">The Vector to process.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Each(numl.Math.LinearAlgebra.Vector,System.Func{System.Double,System.Double},System.Boolean)">
            <summary>A Vector extension method that eaches.</summary>
            <param name="v">The v to act on.</param>
            <param name="transform">The transform.</param>
            <param name="asCopy">(Optional) true to as copy.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Reverse(numl.Math.LinearAlgebra.Vector)">
            <summary>Enumerates reverse in this collection.</summary>
            <param name="v">The v to act on.</param>
            <returns>
            An enumerator that allows foreach to be used to process reverse in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.ToVector(System.Double[])">
            <summary>
            An IEnumerable&lt;int&gt; extension method that converts a seq to a vector.
            </summary>
            <param name="array">The array to act on.</param>
            <returns>seq as a Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.ToMatrix(System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector})">
            <summary>
            An IEnumerable&lt;double[]&gt; extension method that converts an e to a matrix.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="source">The source to act on.</param>
            <returns>e as a Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.ToMatrix(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            An IEnumerable&lt;double[]&gt; extension method that converts an e to a matrix.
            </summary>
            <param name="e">The e to act on.</param>
            <returns>e as a Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Diag(numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that diags.</summary>
            <param name="v">The v to act on.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Diag(numl.Math.LinearAlgebra.Vector,System.Int32,System.Int32)">
            <summary>A Vector extension method that diags.</summary>
            <param name="v">The v to act on.</param>
            <param name="n">The int to process.</param>
            <param name="d">The int to process.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Norm(numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that normals.</summary>
            <param name="v">The v to act on.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Norm(numl.Math.LinearAlgebra.Vector,System.Double)">
            <summary>A Vector extension method that normals.</summary>
            <param name="v">The v to act on.</param>
            <param name="p">The double to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Sum(System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector})">
            <summary>
            An IEnumerable&lt;Vector&gt; extension method that sums the given source.
            </summary>
            <param name="source">The source to act on.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Mean(System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector})">
            <summary>
            A Vector extension method that determines the mean of the given parameters.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="source">The source to act on.</param>
            <returns>The mean value.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Mean(numl.Math.LinearAlgebra.Vector)">
            <summary>
            A Vector extension method that determines the mean of the given parameters.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="source">The source to act on.</param>
            <returns>The mean value.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.StdDev(numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that computes the standard deviation.</summary>
            <param name="source">The source to act on.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Variance(numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that variances the given x coordinate.</summary>
            <param name="x">The x to act on.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Covariance(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that covariances.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The x to act on.</param>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Correlation(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that correlations.</summary>
            <param name="x">The x to act on.</param>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Mode(numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that modes the given source.</summary>
            <param name="source">The source to act on.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Stats(numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that statistics the given x coordinate.</summary>
            <param name="x">The x to act on.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Insert(numl.Math.LinearAlgebra.Vector,System.Int32,System.Double,System.Boolean)">
            <summary>
            Inserts the supplied value into a new Vector at the specified position
            </summary>
            <param name="source"></param>
            <param name="index">Row or Column index</param>
            <param name="value">Value to insert</param>
            <param name="insertAfter">True to add to the end, if the index matches last column</param>
            <returns></returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Expand(numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>A Vector extension method that expands.</summary>
            <param name="source">The source to act on.</param>
            <param name="n">The int to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Expand(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that expands.</summary>
            <param name="source">The source to act on.</param>
            <param name="s">The Vector to process.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.MinIndex(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>An IEnumerable&lt;double&gt; extension method that minimum index.</summary>
            <param name="source">The source to act on.</param>
            <returns>An int.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.MaxIndex(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>An IEnumerable&lt;double&gt; extension method that maximum index.</summary>
            <param name="source">The source to act on.</param>
            <returns>An int.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Top(numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>Enumerates top in this collection.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="source">The source to act on.</param>
            <param name="n">The int to process.</param>
            <returns>
            An enumerator that allows foreach to be used to process top in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.TopReverse(numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>Enumerates top reverse in this collection.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="source">The source to act on.</param>
            <param name="n">The int to process.</param>
            <returns>
            An enumerator that allows foreach to be used to process top reverse in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Indices(System.Collections.Generic.IEnumerable{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>Enumerates indices in this collection.</summary>
            <param name="source">The source to act on.</param>
            <param name="f">The Func&lt;T,double&gt; to process.</param>
            <returns>
            An enumerator that allows foreach to be used to process indices in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Round(numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>A Vector extension method that rounds.</summary>
            <param name="v">The v to act on.</param>
            <param name="decimals">(Optional) the decimals.</param>
            <returns>A Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Slice(numl.Math.LinearAlgebra.Vector,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Enumerates slice in this collection.</summary>
            <param name="v">The v to act on.</param>
            <param name="indices">The indices.</param>
            <returns>
            An enumerator that allows foreach to be used to process slice in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Slice(System.Collections.Generic.IEnumerable{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>Enumerates slice in this collection.</summary>
            <param name="x">The x to act on.</param>
            <param name="where">The where.</param>
            <returns>
            An enumerator that allows foreach to be used to process slice in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Dot(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that dots.</summary>
            <param name="v">The v to act on.</param>
            <param name="x">The x to act on.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Segment(numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>A Vector extension method that segments.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The x to act on.</param>
            <param name="segments">The segments.</param>
            <returns>A Range[].</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Generate(System.Collections.Generic.IEnumerable{System.Double},System.Func{System.Double,System.Double})">
            <summary>Enumerates generate in this collection.</summary>
            <param name="seq">The seq to act on.</param>
            <param name="gen">The generate.</param>
            <returns>
            An enumerator that allows foreach to be used to process generate in this collection.
            </returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.ToVector(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            An IEnumerable&lt;int&gt; extension method that converts a seq to a vector.
            </summary>
            <param name="seq">The seq to act on.</param>
            <returns>seq as a Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.ToVector``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            An IEnumerable&lt;T&gt; extension method that converts this object to a vector.
            </summary>
            <tparam name="T">Generic type parameter.</tparam>
            <param name="seq">The seq to act on.</param>
            <param name="f">The Func&lt;T,double&gt; to process.</param>
            <returns>The given data converted to a Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.ToVector(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            An IEnumerable&lt;int&gt; extension method that converts a seq to a vector.
            </summary>
            <param name="seq">The seq to act on.</param>
            <returns>seq as a Vector.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.ToDouble(numl.Math.LinearAlgebra.Vector)">
            <summary>
            Return the result of a 1 x m * m x 1 
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.First(numl.Math.LinearAlgebra.Vector,System.Func{System.Int32,System.Double,System.Boolean})">
            <summary>A Vector extension method that firsts.</summary>
            <param name="v">The v to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns>An int.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.Last(numl.Math.LinearAlgebra.Vector,System.Func{System.Int32,System.Double,System.Boolean})">
            <summary>A Vector extension method that lasts.</summary>
            <param name="v">The v to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns>An int.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.ContainsNaN(numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that query if 'vector' contains na n.</summary>
            <param name="vector">The vector to act on.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.VectorExtensions.IsNaN(numl.Math.LinearAlgebra.Vector)">
            <summary>A Vector extension method that query if 'vector' is na n.</summary>
            <param name="vector">The vector to act on.</param>
            <returns>true if na n, false if not.</returns>
        </member>
        <member name="T:numl.Math.LinearAlgebra.VectorType">
            <summary>Values that represent VectorType.</summary>
        </member>
        <member name="F:numl.Math.LinearAlgebra.VectorType.Row">
            <summary>An enum constant representing the row option.</summary>
        </member>
        <member name="F:numl.Math.LinearAlgebra.VectorType.Col">
            <summary>An enum constant representing the col option.</summary>
        </member>
        <member name="T:numl.Math.Linkers.AverageLinker">
            <summary>An average linker.</summary>
        </member>
        <member name="T:numl.Math.Linkers.ILinker">
            <summary>Interface for linker.</summary>
        </member>
        <member name="M:numl.Math.Linkers.ILinker.Distance(System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector},System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector})">
            <summary>Distances.</summary>
            <param name="x">The IEnumerable&lt;Vector&gt; to process.</param>
            <param name="y">The IEnumerable&lt;Vector&gt; to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="F:numl.Math.Linkers.AverageLinker._metric">
            <summary>The metric.</summary>
        </member>
        <member name="M:numl.Math.Linkers.AverageLinker.#ctor(numl.Math.Metrics.IDistance)">
            <summary>Constructor.</summary>
            <param name="metric">The metric.</param>
        </member>
        <member name="M:numl.Math.Linkers.AverageLinker.Distance(System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector},System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector})">
            <summary>Distances.</summary>
            <param name="x">The IEnumerable&lt;Vector&gt; to process.</param>
            <param name="y">The IEnumerable&lt;Vector&gt; to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="T:numl.Math.Linkers.CentroidLinker">
            <summary>A centroid linker.</summary>
        </member>
        <member name="F:numl.Math.Linkers.CentroidLinker._metric">
            <summary>The metric.</summary>
        </member>
        <member name="M:numl.Math.Linkers.CentroidLinker.#ctor(numl.Math.Metrics.IDistance)">
            <summary>Constructor.</summary>
            <param name="metric">The metric.</param>
        </member>
        <member name="M:numl.Math.Linkers.CentroidLinker.Distance(System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector},System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector})">
            <summary>Distances.</summary>
            <param name="x">The IEnumerable&lt;Vector&gt; to process.</param>
            <param name="y">The IEnumerable&lt;Vector&gt; to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="T:numl.Math.Linkers.CompleteLinker">
            <summary>A complete linker.</summary>
        </member>
        <member name="F:numl.Math.Linkers.CompleteLinker._metric">
            <summary>The metric.</summary>
        </member>
        <member name="M:numl.Math.Linkers.CompleteLinker.#ctor(numl.Math.Metrics.IDistance)">
            <summary>Constructor.</summary>
            <param name="metric">The metric.</param>
        </member>
        <member name="M:numl.Math.Linkers.CompleteLinker.Distance(System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector},System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector})">
            <summary>Distances.</summary>
            <param name="x">The IEnumerable&lt;Vector&gt; to process.</param>
            <param name="y">The IEnumerable&lt;Vector&gt; to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="T:numl.Math.Linkers.SingleLinker">
            <summary>A single linker.</summary>
        </member>
        <member name="F:numl.Math.Linkers.SingleLinker._metric">
            <summary>The metric.</summary>
        </member>
        <member name="M:numl.Math.Linkers.SingleLinker.#ctor(numl.Math.Metrics.IDistance)">
            <summary>Constructor.</summary>
            <param name="metric">The metric.</param>
        </member>
        <member name="M:numl.Math.Linkers.SingleLinker.Distance(System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector},System.Collections.Generic.IEnumerable{numl.Math.LinearAlgebra.Vector})">
            <summary>Distances.</summary>
            <param name="x">The IEnumerable&lt;Vector&gt; to process.</param>
            <param name="y">The IEnumerable&lt;Vector&gt; to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="T:numl.Math.Metrics.CosineDistance">
            <summary>A cosine distance.</summary>
        </member>
        <member name="T:numl.Math.Metrics.IDistance">
            <summary>Interface for distance.</summary>
        </member>
        <member name="M:numl.Math.Metrics.IDistance.Compute(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Computes.</summary>
            <param name="x">The Vector to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.Metrics.CosineDistance.Compute(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Computes.</summary>
            <param name="x">The Vector to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="T:numl.Math.Metrics.CosineSimilarity">
            <summary>A cosine similarity.</summary>
        </member>
        <member name="T:numl.Math.Metrics.ISimilarity">
            <summary>Interface for similarity.</summary>
        </member>
        <member name="M:numl.Math.Metrics.ISimilarity.Compute(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Computes.</summary>
            <param name="x">The Vector to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Math.Metrics.CosineSimilarity.Compute(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Computes.</summary>
            <param name="x">The Vector to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="T:numl.Math.Metrics.EuclidianDistance">
            <summary>An euclidian distance.</summary>
        </member>
        <member name="M:numl.Math.Metrics.EuclidianDistance.Compute(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Computes.</summary>
            <param name="x">The Vector to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="T:numl.Math.Metrics.EuclidianSimilarity">
            <summary>An euclidian similarity.</summary>
        </member>
        <member name="M:numl.Math.Metrics.EuclidianSimilarity.Compute(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Computes.</summary>
            <param name="x">The Vector to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="T:numl.Math.Metrics.HammingDistance">
            <summary>A hamming distance.</summary>
        </member>
        <member name="M:numl.Math.Metrics.HammingDistance.Compute(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Computes.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The Vector to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="T:numl.Math.Metrics.ManhattanDistance">
            <summary>A manhattan distance.</summary>
        </member>
        <member name="M:numl.Math.Metrics.ManhattanDistance.Compute(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Computes.</summary>
            <param name="x">The Vector to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="T:numl.Math.Metrics.PearsonCorrelation">
            <summary>A pearson correlation.</summary>
        </member>
        <member name="M:numl.Math.Metrics.PearsonCorrelation.Compute(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Computes.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The Vector to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="T:numl.Math.Metrics.TanimotoCoefficient">
            <summary>A tanimoto coefficient.</summary>
        </member>
        <member name="M:numl.Math.Metrics.TanimotoCoefficient.Compute(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Computes.</summary>
            <param name="x">The Vector to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="T:numl.Math.Probability.NormalDistribution">
            <summary>A normal distribution.</summary>
        </member>
        <member name="M:numl.Math.Probability.NormalDistribution.Estimate(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.VectorType)">
            <summary>Estimates.</summary>
            <param name="X">The Matrix to process.</param>
            <param name="type">(Optional) the type.</param>
        </member>
        <member name="M:numl.Math.Probability.NormalDistribution.Compute(numl.Math.LinearAlgebra.Vector)">
            <summary>Computes the given x coordinate.</summary>
            <param name="x">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="P:numl.Math.Probability.NormalDistribution.Mu">
            <summary>Gets or sets the mu.</summary>
            <value>The mu.</value>
        </member>
        <member name="P:numl.Math.Probability.NormalDistribution.Sigma">
            <summary>Gets or sets the sigma.</summary>
            <value>The sigma.</value>
        </member>
        <member name="T:numl.Math.Probability.Sampling">
            <summary>
            SimpleRNG is a simple random number generator based on George Marsaglia's MWC (multiply with
            carry) generator. Although it is very simple, it passes Marsaglia's DIEHARD series of random
            number generator tests.
            
            Written by John D. Cook http://www.johndcook.com.
            </summary>
        </member>
        <member name="F:numl.Math.Probability.Sampling.m_w">
            <summary>The.</summary>
        </member>
        <member name="F:numl.Math.Probability.Sampling.m_z">
            <summary>The.</summary>
        </member>
        <member name="M:numl.Math.Probability.Sampling.#cctor">
            <summary>Static constructor.</summary>
        </member>
        <member name="M:numl.Math.Probability.Sampling.SetSeed(System.UInt32,System.UInt32)">
            <summary>
            The random generator seed can be set three ways: 1) specifying two non-zero unsigned integers
            2) specifying one non-zero unsigned integer and taking a default value for the second 3)
            setting the seed from the system time.
            </summary>
            <param name="u">The uint to process.</param>
            <param name="v">The uint to process.</param>
        </member>
        <member name="M:numl.Math.Probability.Sampling.SetSeed(System.UInt32)">
            <summary>Sets a seed.</summary>
            <param name="u">The uint to process.</param>
        </member>
        <member name="M:numl.Math.Probability.Sampling.SetSeedFromSystemTime">
            <summary>Creates random number generator seed.</summary>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetUniform">
            <summary>
            Produce a uniform random sample from the open interval (0, 1). The method will not return
            either end point.
            </summary>
            <returns>Random Sample.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetUniform(System.Int32)">
            <summary>
            Produce a uniform random sample from the open interval (0, max). The method will not return
            either end point.
            </summary>
            <param name="max">Max (Exclusive)</param>
            <returns>Random Sample.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetUniform(System.Int32,System.Int32)">
            <summary>
            Produce a uniform random sample from the open interval (min, max). The method will not return
            either end point.
            </summary>
            <param name="min">Min (exclusive)</param>
            <param name="max">Max (exclusive)</param>
            <returns>Random Sample.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetUint">
            <summary>
            This is the heart of the generator. It uses George Marsaglia's MWC algorithm to produce an
            unsigned integer. See http://www.bobwheeler.com/statistics/Password/MarsagliaPost.txt.
            </summary>
            <returns>The uint.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetNormal">
            <summary>Normal (Gaussian) random sample with mean 0 and standard deviation 1.</summary>
            <returns>Random Sample.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetNormal(System.Double,System.Double)">
            <summary>
            Normal (Gaussian) random sample with specified mean and standard deviation.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the
            required range.</exception>
            <param name="mean">Mean.</param>
            <param name="standardDeviation">Standard deviation.</param>
            <returns>Random Sample.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetExponential">
            <summary>Exponential random sample with mean 1.</summary>
            <returns>Random Sample.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetExponential(System.Double)">
            <summary>Exponential random sample with specified mean.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the
            required range.</exception>
            <param name="mean">mean parameter.</param>
            <returns>Random Sample.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetGamma(System.Double,System.Double)">
            <summary>Gets a gamma.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the
            required range.</exception>
            <param name="shape">The shape.</param>
            <param name="scale">The scale.</param>
            <returns>The gamma.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetChiSquare(System.Double)">
            <summary>Gets chi square.</summary>
            <param name="degreesOfFreedom">The degrees of freedom.</param>
            <returns>The chi square.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetInverseGamma(System.Double,System.Double)">
            <summary>Gets inverse gamma.</summary>
            <param name="shape">The shape.</param>
            <param name="scale">The scale.</param>
            <returns>The inverse gamma.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetWeibull(System.Double,System.Double)">
            <summary>Gets a weibull.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the
            required range.</exception>
            <param name="shape">The shape.</param>
            <param name="scale">The scale.</param>
            <returns>The weibull.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetCauchy(System.Double,System.Double)">
            <summary>Gets a cauchy.</summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
            illegal values.</exception>
            <param name="median">The median.</param>
            <param name="scale">The scale.</param>
            <returns>The cauchy.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetStudentT(System.Double)">
            <summary>Gets student.</summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
            illegal values.</exception>
            <param name="degreesOfFreedom">The degrees of freedom.</param>
            <returns>The student.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetLaplace(System.Double,System.Double)">
            <summary>
            The Laplace distribution is also known as the double exponential distribution.
            </summary>
            <param name="mean">Mean.</param>
            <param name="scale">The scale.</param>
            <returns>The laplace.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetLogNormal(System.Double,System.Double)">
            <summary>Gets log normal.</summary>
            <param name="mu">The mu.</param>
            <param name="sigma">The sigma.</param>
            <returns>The log normal.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetBeta(System.Double,System.Double)">
            <summary>Gets a beta.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the
            required range.</exception>
            <param name="a">The double to process.</param>
            <param name="b">The double to process.</param>
            <returns>The beta.</returns>
        </member>
        <member name="M:numl.Math.Probability.Sampling.GetPower(System.Double,System.Double)">
            <summary>Gets a power.</summary>
            <param name="a">The double to process.</param>
            <param name="min">(Optional) Min (exclusive)</param>
            <returns>The power.</returns>
        </member>
        <member name="T:numl.Math.Range">
            <summary>A range.</summary>
        </member>
        <member name="M:numl.Math.Range.Test(System.Double)">
            <summary>Tests.</summary>
            <param name="d">The double to process.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:numl.Math.Range.Make(System.Double,System.Double)">
            <summary>Makes.</summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>A Range.</returns>
        </member>
        <member name="M:numl.Math.Range.Make(System.Double)">
            <summary>Makes.</summary>
            <param name="min">The minimum.</param>
            <returns>A Range.</returns>
        </member>
        <member name="M:numl.Math.Range.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:numl.Math.Range.Min">
            <summary>Gets or sets the minimum.</summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:numl.Math.Range.Max">
            <summary>Gets or sets the maximum.</summary>
            <value>The maximum value.</value>
        </member>
        <member name="T:numl.Model.DescriptorException">
            <summary>Descriptor Exception.</summary>
        </member>
        <member name="M:numl.Model.DescriptorException.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Model.DescriptorException.#ctor(System.String)">
            <summary>Specialised constructor for use only by derived classes.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:numl.Model.DescriptorException.#ctor(System.String,System.Exception)">
            <summary>Specialised constructor for use only by derived classes.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:numl.Model.DescriptorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Specialised constructor for use only by derived classes.</summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:numl.Model.DescriptorProperty">
            <summary>
            Fluent API addition for simplifying the process of adding features and labels to a descriptor.
            </summary>
        </member>
        <member name="F:numl.Model.DescriptorProperty._descriptor">
            <summary>The descriptor.</summary>
        </member>
        <member name="F:numl.Model.DescriptorProperty._name">
            <summary>The name.</summary>
        </member>
        <member name="F:numl.Model.DescriptorProperty._label">
            <summary>true to label.</summary>
        </member>
        <member name="M:numl.Model.DescriptorProperty.#ctor(numl.Model.Descriptor,System.String,System.Boolean)">
            <summary>internal constructor used for creating chaining.</summary>
            <param name="descriptor">descriptor.</param>
            <param name="name">name of property.</param>
            <param name="label">label property?</param>
        </member>
        <member name="M:numl.Model.DescriptorProperty.Use(System.Func{System.Object,System.Double})">
            <summary>Not ready.</summary>
            <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            <param name="conversion">Conversion method.</param>
            <returns>Descriptor.</returns>
        </member>
        <member name="M:numl.Model.DescriptorProperty.As(System.Type)">
            <summary>Adds property to descriptor with chained name and type.</summary>
            <param name="type">Property Type.</param>
            <returns>descriptor with added property.</returns>
        </member>
        <member name="M:numl.Model.DescriptorProperty.AsString">
            <summary>
            Adds the default string property to descriptor with previously chained name.
            </summary>
            <returns>descriptor with added property.</returns>
        </member>
        <member name="M:numl.Model.DescriptorProperty.AsString(numl.Model.StringSplitType,System.String,System.String)">
            <summary>Adds string property to descriptor with previously chained name.</summary>
            <param name="splitType">How to split string.</param>
            <param name="separator">(Optional) Separator to use.</param>
            <param name="exclusions">(Optional) file describing strings to exclude.</param>
            <returns>descriptor with added property.</returns>
        </member>
        <member name="M:numl.Model.DescriptorProperty.AsStringEnum">
            <summary>Adds string property to descriptor with previously chained name.</summary>
            <returns>descriptor with added property.</returns>
        </member>
        <member name="M:numl.Model.DescriptorProperty.AsDateTime(numl.Model.DateTimeFeature)">
            <summary>Adds DateTime property to descriptor with previously chained name.</summary>
            <exception cref="T:numl.Model.DescriptorException">Thrown when a Descriptor error condition occurs.</exception>
            <param name="features">Which date features to use (can pipe: DateTimeFeature.Year |
            DateTimeFeature.DayOfWeek)</param>
            <returns>descriptor with added property.</returns>
        </member>
        <member name="M:numl.Model.DescriptorProperty.AsDateTime(numl.Model.DatePortion)">
            <summary>Adds DateTime property to descriptor with previously chained name.</summary>
            <exception cref="T:numl.Model.DescriptorException">Thrown when a Descriptor error condition occurs.</exception>
            <param name="portion">Which date portions to use (can pipe: DateTimeFeature.Year |
            DateTimeFeature.DayOfWeek)</param>
            <returns>descriptor with added property.</returns>
        </member>
        <member name="M:numl.Model.DescriptorProperty.AsEnumerable(System.Int32)">
            <summary>Adds Enumerable property to descriptor with previousy chained name.</summary>
            <exception cref="T:numl.Model.DescriptorException">Thrown when a Descriptor error condition occurs.</exception>
            <param name="length">length of enumerable to expand.</param>
            <returns>descriptor with added property.</returns>
        </member>
        <member name="M:numl.Model.DescriptorProperty.AddProperty(numl.Model.Property)">
            <summary>Adds a property.</summary>
            <param name="p">The Property to process.</param>
        </member>
        <member name="T:numl.Model.EnumerableProperty">
            <summary>Enumerable property. Expanded feature.</summary>
        </member>
        <member name="T:numl.Model.Property">
            <summary>Concrete property. Used to convert any given data type to a number.</summary>
        </member>
        <member name="M:numl.Model.Property.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Model.Property.PreProcess(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Used as a preprocessing step when overridden. Can be used to look at the entire data set as a
            whole before converting single elements.
            </summary>
            <param name="examples">Examples.</param>
        </member>
        <member name="M:numl.Model.Property.PreProcess(System.Object)">
            <summary>
            Used as a preprocessing step when overriden. Can be used to look at the current object in
            question before converting single elements.
            </summary>
            <param name="example">Example.</param>
        </member>
        <member name="M:numl.Model.Property.PostProcess(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Used as a postprocessing step when overridden. Can be used to look at the entire data set as
            a whole after converting single elements.
            </summary>
            <param name="examples">Examples.</param>
        </member>
        <member name="M:numl.Model.Property.PostProcess(System.Object)">
            <summary>
            Used as a postprocessing step when overriden. Can be used to look at the current object in
            question fater converting single elements.
            </summary>
            <param name="example">.</param>
        </member>
        <member name="M:numl.Model.Property.Convert(System.Double)">
            <summary>Convert the numeric representation back to the original type.</summary>
            <param name="val">.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Model.Property.Convert(System.Object)">
            <summary>Convert an object to a list of numbers.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="o">Object.</param>
            <returns>Lazy list of doubles.</returns>
        </member>
        <member name="M:numl.Model.Property.GetColumns">
            <summary>
            Retrieve the list of expanded columns. If there is a one-to-one correspondence between the
            type and its expansion it will return a single value/.
            </summary>
            <returns>
            An enumerator that allows foreach to be used to process the columns in this collection.
            </returns>
        </member>
        <member name="M:numl.Model.Property.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:numl.Model.Property.GetSchema">
            <summary>serialization.</summary>
            <returns>The schema.</returns>
        </member>
        <member name="M:numl.Model.Property.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="M:numl.Model.Property.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="P:numl.Model.Property.Name">
            <summary>Property Name - Maps to object property or dictionary lookup.</summary>
            <value>The name.</value>
        </member>
        <member name="P:numl.Model.Property.Type">
            <summary>Type of property.</summary>
            <value>The type.</value>
        </member>
        <member name="P:numl.Model.Property.Length">
            <summary>Length of property.</summary>
            <value>The length.</value>
        </member>
        <member name="P:numl.Model.Property.Start">
            <summary>Start position in array.</summary>
            <value>The start.</value>
        </member>
        <member name="P:numl.Model.Property.Discrete">
            <summary>Discrete or continuous value.</summary>
            <value>true if discrete, false if not.</value>
        </member>
        <member name="F:numl.Model.EnumerableProperty._length">
            <summary>The length.</summary>
        </member>
        <member name="M:numl.Model.EnumerableProperty.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Model.EnumerableProperty.#ctor(System.Int32)">
            <summary>Constructor.</summary>
            <param name="length">The length.</param>
        </member>
        <member name="M:numl.Model.EnumerableProperty.GetColumns">
            <summary>
            Retrieve the list of expanded columns. If there is a one-to-one correspondence between the
            type and its expansion it will return a single value/.
            </summary>
            <returns>
            An enumerator that allows foreach to be used to process the columns in this collection.
            </returns>
        </member>
        <member name="M:numl.Model.EnumerableProperty.Convert(System.Double)">
            <summary>Convert the numeric representation back to the original type.</summary>
            <param name="val">.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Model.EnumerableProperty.Convert(System.Object)">
            <summary>Convert an object to a list of numbers.</summary>
            <exception cref="T:System.InvalidCastException">Thrown when an object cannot be cast to a required
            type.</exception>
            <param name="o">Object.</param>
            <returns>Lazy list of doubles.</returns>
        </member>
        <member name="M:numl.Model.EnumerableProperty.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="M:numl.Model.EnumerableProperty.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="P:numl.Model.EnumerableProperty.Length">
            <summary>Length of property.</summary>
            <value>The length.</value>
        </member>
        <member name="T:numl.Model.DateTimeFeature">
            <summary>Features available for the DateTime property.</summary>
        </member>
        <member name="F:numl.Model.DateTimeFeature.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="F:numl.Model.DateTimeFeature.DayOfYear">
            <summary>
            Day of the year (1, 366)
            </summary>
        </member>
        <member name="F:numl.Model.DateTimeFeature.Month">
            <summary>
            Month
            </summary>
        </member>
        <member name="F:numl.Model.DateTimeFeature.Day">
            <summary>
            Day
            </summary>
        </member>
        <member name="F:numl.Model.DateTimeFeature.DayOfWeek">
            <summary>
            Day of the week (0, 6)
            </summary>
        </member>
        <member name="F:numl.Model.DateTimeFeature.Hour">
            <summary>
            Hour
            </summary>
        </member>
        <member name="F:numl.Model.DateTimeFeature.Minute">
            <summary>
            Minute
            </summary>
        </member>
        <member name="F:numl.Model.DateTimeFeature.Second">
            <summary>
            Second
            </summary>
        </member>
        <member name="F:numl.Model.DateTimeFeature.Millisecond">
            <summary>
            Millisecond
            </summary>
        </member>
        <member name="T:numl.Model.DatePortion">
            <summary>Date portions available for the DateTime property.</summary>
        </member>
        <member name="F:numl.Model.DatePortion.Date">
            <summary>
            Date (Jan. 1, 2000) -> [1, 1, 2000]
            </summary>
        </member>
        <member name="F:numl.Model.DatePortion.DateExtended">
            <summary>
            Extended Date (Jan. 1, 2000) -> [1, 6] (DayOfYear, DayOfWeek)
            </summary>
        </member>
        <member name="F:numl.Model.DatePortion.Time">
            <summary>
            Time 4:45pm -> [16, 45] (Hour, Minute)
            </summary>
        </member>
        <member name="F:numl.Model.DatePortion.TimeExtended">
            <summary>
            Extended Time 4:45pm -> [0, 0] (Second, Millisecond)
            </summary>
        </member>
        <member name="T:numl.Model.DateTimeProperty">
            <summary>DateTime Property. Used as a feature expansion mechanism.</summary>
        </member>
        <member name="M:numl.Model.DateTimeProperty.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Model.DateTimeProperty.#ctor(numl.Model.DatePortion)">
            <summary>Constructor.</summary>
            <param name="portion">The portion.</param>
        </member>
        <member name="M:numl.Model.DateTimeProperty.#ctor(numl.Model.DateTimeFeature)">
            <summary>Constructor.</summary>
            <param name="features">The features.</param>
        </member>
        <member name="F:numl.Model.DateTimeProperty._length">
            <summary>The length.</summary>
        </member>
        <member name="M:numl.Model.DateTimeProperty.Convert(System.Double)">
            <summary>Convert the numeric representation back to the original type.</summary>
            <param name="val">.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Model.DateTimeProperty.Initialize(numl.Model.DatePortion)">
            <summary>Initializes this object.</summary>
            <param name="portion">The portion.</param>
        </member>
        <member name="M:numl.Model.DateTimeProperty.GetColumns">
            <summary>
            Retrieve the list of expanded columns. If there is a one-to-one correspondence between the
            type and its expansion it will return a single value/.
            </summary>
            <returns>
            An enumerator that allows foreach to be used to process the columns in this collection.
            </returns>
        </member>
        <member name="M:numl.Model.DateTimeProperty.Convert(System.Object)">
            <summary>Convert an object to a list of numbers.</summary>
            <exception cref="T:System.InvalidCastException">Thrown when an object cannot be cast to a required
            type.</exception>
            <param name="o">Object.</param>
            <returns>Lazy list of doubles.</returns>
        </member>
        <member name="M:numl.Model.DateTimeProperty.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="M:numl.Model.DateTimeProperty.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="P:numl.Model.DateTimeProperty.Features">
            <summary>Gets or sets the features.</summary>
            <value>The features.</value>
        </member>
        <member name="P:numl.Model.DateTimeProperty.Length">
            <summary>Length of property.</summary>
            <value>The length.</value>
        </member>
        <member name="T:numl.Model.StringSplitType">
            <summary>Enumeration describing how to split a string property.</summary>
        </member>
        <member name="F:numl.Model.StringSplitType.Character">
            <summary>
            Split string into corresponding characters
            </summary>
        </member>
        <member name="F:numl.Model.StringSplitType.Word">
            <summary>
            Split string into corresponding words
            </summary>
        </member>
        <member name="T:numl.Model.StringProperty">
            <summary>Represents a string property.</summary>
        </member>
        <member name="M:numl.Model.StringProperty.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Model.StringProperty.GetColumns">
            <summary>Expansion column names.</summary>
            <returns>List of distinct words and positions.</returns>
        </member>
        <member name="M:numl.Model.StringProperty.PreProcess(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Preprocess data set to create dictionary.</summary>
            <param name="examples">.</param>
        </member>
        <member name="M:numl.Model.StringProperty.Convert(System.Double)">
            <summary>Convert from number to string.</summary>
            <param name="val">Number.</param>
            <returns>String.</returns>
        </member>
        <member name="M:numl.Model.StringProperty.Convert(System.Object)">
            <summary>Convert string to list of numbers.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="o">in string.</param>
            <returns>lazy list of numbers.</returns>
        </member>
        <member name="M:numl.Model.StringProperty.ImportExclusions(System.String)">
            <summary>import exclusion list from file.</summary>
            <param name="file">.</param>
        </member>
        <member name="M:numl.Model.StringProperty.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="M:numl.Model.StringProperty.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="P:numl.Model.StringProperty.Separator">
            <summary>How to separate words (defaults to a space)</summary>
            <value>The separator.</value>
        </member>
        <member name="P:numl.Model.StringProperty.SplitType">
            <summary>How to split text.</summary>
            <value>The type of the split.</value>
        </member>
        <member name="P:numl.Model.StringProperty.Dictionary">
            <summary>generated dictionary (using bag of words model)</summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:numl.Model.StringProperty.Exclude">
            <summary>Exclusion set (stopword removal)</summary>
            <value>The exclude.</value>
        </member>
        <member name="P:numl.Model.StringProperty.AsEnum">
            <summary>Treat as enumeration.</summary>
            <value>true if as enum, false if not.</value>
        </member>
        <member name="P:numl.Model.StringProperty.Length">
            <summary>Expansion length (total distinct words)</summary>
            <value>The length.</value>
        </member>
        <member name="T:numl.PreProcessing.FeatureDimensions">
            <summary>
            Feature Dimensions class
            </summary>
        </member>
        <member name="M:numl.PreProcessing.FeatureDimensions.IncreaseDimensions(numl.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>
            Adds a specified number of polynomial features to the training / test Vector.
            </summary>
            <param name="x">Training / Testing record</param>
            <param name="polynomialFeatures">Number of polynomial features to add</param>
            <returns></returns>
        </member>
        <member name="M:numl.PreProcessing.FeatureDimensions.IncreaseDimensions(numl.Math.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Adds a specified number of polynomial features to the training set Matrix.
            </summary>
            <param name="x">Training set</param>
            <param name="polynomialFeatures">Number of polynomial features to add</param>
            <returns></returns>
        </member>
        <member name="T:numl.PreProcessing.FeatureNormalizer">
            <summary>
            Feature Normalisation extension methods
            </summary>
        </member>
        <member name="M:numl.PreProcessing.FeatureNormalizer.FeatureScale(System.Double,System.Double,System.Double)">
            <summary>
            Performs feature scaling on the supplied value
            </summary>
            <param name="value"></param>
            <param name="avg">The feature average</param>
            <param name="std">The standard deviation of the feature</param>
            <returns></returns>
        </member>
        <member name="M:numl.PreProcessing.FeatureNormalizer.FeatureScale(System.Double[])">
            <summary>
            Performs feature scaling on the supplied array and returns a copy
            </summary>
            <param name="column">Column array to compute</param>
            <returns></returns>
        </member>
        <member name="M:numl.PreProcessing.FeatureNormalizer.FeatureScale(numl.Math.LinearAlgebra.Vector)">
            <summary>
            Performs feature scaling on the supplied column vector and returns a copy
            </summary>
            <param name="column">Column vector to compute</param>
            <returns></returns>
        </member>
        <member name="T:numl.Supervised.DecisionTree.DecisionTreeGenerator">
            <summary>A decision tree generator.</summary>
        </member>
        <member name="T:numl.Supervised.Generator">
            <summary>A generator.</summary>
        </member>
        <member name="T:numl.Supervised.IGenerator">
            <summary>Interface for generator.</summary>
        </member>
        <member name="M:numl.Supervised.IGenerator.Generate(numl.Model.Descriptor,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Generates.</summary>
            <param name="descriptor">The descriptor.</param>
            <param name="examples">The examples.</param>
            <returns>An IModel.</returns>
        </member>
        <member name="M:numl.Supervised.IGenerator.Generate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Generates the given examples.</summary>
            <tparam name="T">Generic type parameter.</tparam>
            <param name="examples">The examples.</param>
            <returns>An IModel.</returns>
        </member>
        <member name="M:numl.Supervised.IGenerator.Generate(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Generates.</summary>
            <param name="x">The Matrix to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>An IModel.</returns>
        </member>
        <member name="P:numl.Supervised.IGenerator.Descriptor">
            <summary>Gets or sets the descriptor.</summary>
            <value>The descriptor.</value>
        </member>
        <member name="M:numl.Supervised.Generator.OnModelChanged(System.Object,numl.Supervised.ModelEventArgs)">
            <summary>Raises the model event.</summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Event information to send to registered event handlers.</param>
        </member>
        <member name="M:numl.Supervised.Generator.Generate(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Generate model based on a set of examples.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="examples">Example set.</param>
            <returns>Model.</returns>
        </member>
        <member name="M:numl.Supervised.Generator.Generate(numl.Model.Descriptor,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Generate model based on a set of examples.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="description">The description.</param>
            <param name="examples">Example set.</param>
            <returns>Model.</returns>
        </member>
        <member name="M:numl.Supervised.Generator.Generate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Generates the given examples.</summary>
            <tparam name="T">Generic type parameter.</tparam>
            <param name="examples">Example set.</param>
            <returns>An IModel.</returns>
        </member>
        <member name="M:numl.Supervised.Generator.Generate(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Generate model based on a set of examples.</summary>
            <param name="x">The Matrix to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>Model.</returns>
        </member>
        <member name="E:numl.Supervised.Generator.ModelChanged">
            <summary>Event queue for all listeners interested in ModelChanged events.</summary>
        </member>
        <member name="P:numl.Supervised.Generator.Descriptor">
            <summary>Gets or sets the descriptor.</summary>
            <value>The descriptor.</value>
        </member>
        <member name="F:numl.Supervised.DecisionTree.DecisionTreeGenerator._impurity">
            <summary>The impurity.</summary>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeGenerator.#ctor(numl.Model.Descriptor)">
            <summary>Constructor.</summary>
            <param name="descriptor">the descriptor.</param>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeGenerator.#ctor(System.Int32,System.Int32,numl.Model.Descriptor,System.Type,System.Double)">
            <summary>Constructor.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="depth">(Optional) The depth.</param>
            <param name="width">(Optional) the width.</param>
            <param name="descriptor">(Optional) the descriptor.</param>
            <param name="impurityType">(Optional) type of the impurity.</param>
            <param name="hint">(Optional) the hint.</param>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeGenerator.SetHint(System.Object)">
            <summary>Sets a hint.</summary>
            <param name="o">The object to process.</param>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeGenerator.Generate(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Generates.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The Matrix to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>An IModel.</returns>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeGenerator.BuildTree(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>Builds a tree.</summary>
            <param name="x">The Matrix to process.</param>
            <param name="y">The Vector to process.</param>
            <param name="depth">The depth.</param>
            <param name="used">The used.</param>
            <returns>A Node.</returns>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeGenerator.GetBestSplit(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector,System.Collections.Generic.List{System.Int32})">
            <summary>Gets best split.</summary>
            <param name="x">The Matrix to process.</param>
            <param name="y">The Vector to process.</param>
            <param name="used">The used.</param>
            <returns>The best split.</returns>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeGenerator.BuildLeafNode(System.Double)">
            <summary>Builds leaf node.</summary>
            <param name="val">The value.</param>
            <returns>A Node.</returns>
        </member>
        <member name="P:numl.Supervised.DecisionTree.DecisionTreeGenerator.Depth">
            <summary>Gets or sets the depth.</summary>
            <value>The depth.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.DecisionTreeGenerator.Width">
            <summary>Gets or sets the width.</summary>
            <value>The width.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.DecisionTreeGenerator.Hint">
            <summary>Gets or sets the hint.</summary>
            <value>The hint.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.DecisionTreeGenerator.ImpurityType">
            <summary>Gets or sets the type of the impurity.</summary>
            <value>The type of the impurity.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.DecisionTreeGenerator.Impurity">
            <summary>Gets the impurity.</summary>
            <value>The impurity.</value>
        </member>
        <member name="T:numl.Supervised.DecisionTree.DecisionTreeModel">
            <summary>A data Model for the decision tree.</summary>
        </member>
        <member name="T:numl.Supervised.Model">
            <summary>A model.</summary>
        </member>
        <member name="T:numl.Supervised.IModel">
            <summary>Interface for model.</summary>
        </member>
        <member name="M:numl.Supervised.IModel.Predict(numl.Math.LinearAlgebra.Vector)">
            <summary>Predicts the given o.</summary>
            <param name="y">The Vector to process.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Supervised.IModel.Predict``1(``0)">
            <summary>Predicts the given o.</summary>
            <tparam name="T">Generic type parameter.</tparam>
            <param name="o">The object to process.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:numl.Supervised.IModel.Predict(System.Object)">
            <summary>Predicts the given o.</summary>
            <param name="o">The object to process.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Supervised.IModel.Save(System.String)">
            <summary>Model persistance.</summary>
            <param name="file">The file to load.</param>
        </member>
        <member name="M:numl.Supervised.IModel.Save(System.IO.Stream)">
            <summary>Saves the given stream.</summary>
            <param name="stream">The stream to load.</param>
        </member>
        <member name="M:numl.Supervised.IModel.Load(System.String)">
            <summary>Loads the given stream.</summary>
            <param name="file">The file to load.</param>
            <returns>An IModel.</returns>
        </member>
        <member name="M:numl.Supervised.IModel.Load(System.IO.Stream)">
            <summary>Loads the given stream.</summary>
            <param name="stream">The stream to load.</param>
            <returns>An IModel.</returns>
        </member>
        <member name="P:numl.Supervised.IModel.Descriptor">
            <summary>Gets or sets the descriptor.</summary>
            <value>The descriptor.</value>
        </member>
        <member name="M:numl.Supervised.Model.Predict(numl.Math.LinearAlgebra.Vector)">
            <summary>Predicts the given o.</summary>
            <param name="y">The Vector to process.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Supervised.Model.Predict(System.Object)">
            <summary>Predicts the given o.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="o">The object to process.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Supervised.Model.Predict``1(``0)">
            <summary>Predicts the given o.</summary>
            <tparam name="T">Generic type parameter.</tparam>
            <param name="o">The object to process.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:numl.Supervised.Model.Save(System.String)">
            <summary>Model persistance.</summary>
            <param name="file">The file to load.</param>
        </member>
        <member name="M:numl.Supervised.Model.Save(System.IO.Stream)">
            <summary>Saves the given stream.</summary>
            <param name="stream">The stream to load.</param>
        </member>
        <member name="M:numl.Supervised.Model.ToXml">
            <summary>Converts this object to an XML.</summary>
            <returns>This object as a string.</returns>
        </member>
        <member name="M:numl.Supervised.Model.Load(System.String)">
            <summary>Loads the given stream.</summary>
            <param name="file">The file to load.</param>
            <returns>An IModel.</returns>
        </member>
        <member name="M:numl.Supervised.Model.Load(System.IO.Stream)">
            <summary>Loads the given stream.</summary>
            <param name="stream">The stream to load.</param>
            <returns>An IModel.</returns>
        </member>
        <member name="M:numl.Supervised.Model.LoadXml(System.String)">
            <summary>Loads an XML.</summary>
            <param name="xml">The XML.</param>
            <returns>The XML.</returns>
        </member>
        <member name="M:numl.Supervised.Model.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable
            interface, you should return null (Nothing in Visual Basic) from this method, and instead, if
            specifying a custom schema is required, apply the
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the
            object that is produced by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
            method and consumed by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
            method.
            </returns>
        </member>
        <member name="M:numl.Supervised.Model.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="M:numl.Supervised.Model.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="P:numl.Supervised.Model.Descriptor">
            <summary>Gets or sets the descriptor.</summary>
            <value>The descriptor.</value>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeModel.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeModel.Predict(numl.Math.LinearAlgebra.Vector)">
            <summary>Predicts the given y coordinate.</summary>
            <param name="y">The Vector to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeModel.WalkNode(numl.Math.LinearAlgebra.Vector,numl.Supervised.DecisionTree.Node)">
            <summary>Walk node.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="v">The Vector to process.</param>
            <param name="node">The node.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeModel.Load(System.IO.Stream)">
            <summary>Loads the given stream.</summary>
            <param name="stream">The stream to load.</param>
            <returns>An IModel.</returns>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeModel.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeModel.PrintNode(numl.Supervised.DecisionTree.Node,System.String)">
            <summary>Print node.</summary>
            <param name="n">The Node to process.</param>
            <param name="pre">The pre.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeModel.ReLinkNodes(numl.Supervised.DecisionTree.Node)">
            <summary>Re link nodes.</summary>
            <param name="n">The Node to process.</param>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeModel.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="M:numl.Supervised.DecisionTree.DecisionTreeModel.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="P:numl.Supervised.DecisionTree.DecisionTreeModel.Tree">
            <summary>Gets or sets the tree.</summary>
            <value>The tree.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.DecisionTreeModel.Hint">
            <summary>Gets or sets the hint.</summary>
            <value>The hint.</value>
        </member>
        <member name="T:numl.Supervised.KNN.KNNGenerator">
            <summary>A knn generator.</summary>
        </member>
        <member name="M:numl.Supervised.KNN.KNNGenerator.#ctor(System.Int32)">
            <summary>Constructor.</summary>
            <param name="k">(Optional) the int to process.</param>
        </member>
        <member name="M:numl.Supervised.KNN.KNNGenerator.Generate(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Generate model based on a set of examples.</summary>
            <param name="x">The Matrix to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>Model.</returns>
        </member>
        <member name="P:numl.Supervised.KNN.KNNGenerator.K">
            <summary>Gets or sets the k.</summary>
            <value>The k.</value>
        </member>
        <member name="T:numl.Supervised.KNN.KNNModel">
            <summary>A data Model for the knn.</summary>
        </member>
        <member name="M:numl.Supervised.KNN.KNNModel.Predict(numl.Math.LinearAlgebra.Vector)">
            <summary>Predicts the given o.</summary>
            <param name="y">The Vector to process.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Supervised.KNN.KNNModel.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="M:numl.Supervised.KNN.KNNModel.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="P:numl.Supervised.KNN.KNNModel.K">
            <summary>Gets or sets the k.</summary>
            <value>The k.</value>
        </member>
        <member name="P:numl.Supervised.KNN.KNNModel.X">
            <summary>Gets or sets the x coordinate.</summary>
            <value>The x coordinate.</value>
        </member>
        <member name="P:numl.Supervised.KNN.KNNModel.Y">
            <summary>Gets or sets the y coordinate.</summary>
            <value>The y coordinate.</value>
        </member>
        <member name="T:numl.Supervised.NaiveBayes.Measure">
            <summary>A measure.</summary>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Measure.Increment(System.Double)">
            <summary>Increments.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The x coordinate.</param>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Measure.GetProbability(System.Double)">
            <summary>Gets a probability.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The x coordinate.</param>
            <returns>The probability.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Measure.GetStatisticFor(System.Double)">
            <summary>Gets statistic for.</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is outside the required
            range.</exception>
            <param name="x">The x coordinate.</param>
            <returns>The statistic for.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Measure.Normalize">
            <summary>Normalizes this object.</summary>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Measure.Clone">
            <summary>Makes a deep copy of this object.</summary>
            <returns>A copy of this object.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Measure.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Measure.Equals(System.Object)">
            <summary>Tests if this object is considered equal to another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Measure.GetHashCode">
            <summary>Calculates a hash code for this object.</summary>
            <returns>A hash code for this object.</returns>
        </member>
        <member name="P:numl.Supervised.NaiveBayes.Measure.Label">
            <summary>Gets or sets the label.</summary>
            <value>The label.</value>
        </member>
        <member name="P:numl.Supervised.NaiveBayes.Measure.Discrete">
            <summary>Gets or sets a value indicating whether the discrete.</summary>
            <value>true if discrete, false if not.</value>
        </member>
        <member name="P:numl.Supervised.NaiveBayes.Measure.Probabilities">
            <summary>Gets or sets the probabilities.</summary>
            <value>The probabilities.</value>
        </member>
        <member name="T:numl.Supervised.NaiveBayes.NaiveBayesGenerator">
            <summary>A naive bayes generator.</summary>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.NaiveBayesGenerator.#ctor(System.Int32)">
            <summary>Constructor.</summary>
            <param name="width">The width.</param>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.NaiveBayesGenerator.Generate(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Generate model based on a set of examples.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The Matrix to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>Model.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.NaiveBayesGenerator.GetLabelStats(numl.Math.LinearAlgebra.Vector)">
            <summary>Gets label statistics.</summary>
            <param name="y">The Vector to process.</param>
            <returns>An array of statistic.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.NaiveBayesGenerator.GetBaseConditionals(numl.Math.LinearAlgebra.Matrix)">
            <summary>Gets base conditionals.</summary>
            <param name="x">The Matrix to process.</param>
            <returns>An array of measure.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.NaiveBayesGenerator.CloneMeasure(numl.Supervised.NaiveBayes.Measure[])">
            <summary>Clone measure.</summary>
            <param name="measures">The measures.</param>
            <returns>A Measure[].</returns>
        </member>
        <member name="P:numl.Supervised.NaiveBayes.NaiveBayesGenerator.Width">
            <summary>Gets or sets the width.</summary>
            <value>The width.</value>
        </member>
        <member name="T:numl.Supervised.NaiveBayes.Statistic">
            <summary>A statistic.</summary>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Statistic.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Statistic.Clone">
            <summary>Makes a deep copy of this object.</summary>
            <returns>A copy of this object.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Statistic.Make(System.String,numl.Math.Range,System.Int32)">
            <summary>Makes.</summary>
            <param name="label">The label.</param>
            <param name="x">The Range to process.</param>
            <param name="count">(Optional) number of.</param>
            <returns>A Statistic.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Statistic.Make(System.String,System.Double,System.Int32)">
            <summary>Makes.</summary>
            <param name="label">The label.</param>
            <param name="val">The value.</param>
            <param name="count">(Optional) number of.</param>
            <returns>A Statistic.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Statistic.Equals(System.Object)">
            <summary>Tests if this object is considered equal to another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.Statistic.GetHashCode">
            <summary>Calculates a hash code for this object.</summary>
            <returns>A hash code for this object.</returns>
        </member>
        <member name="P:numl.Supervised.NaiveBayes.Statistic.Label">
            <summary>Gets or sets the label.</summary>
            <value>The label.</value>
        </member>
        <member name="P:numl.Supervised.NaiveBayes.Statistic.Discrete">
            <summary>Gets or sets a value indicating whether the discrete.</summary>
            <value>true if discrete, false if not.</value>
        </member>
        <member name="P:numl.Supervised.NaiveBayes.Statistic.Count">
            <summary>Gets or sets the number of. </summary>
            <value>The count.</value>
        </member>
        <member name="P:numl.Supervised.NaiveBayes.Statistic.X">
            <summary>Gets or sets the x coordinate.</summary>
            <value>The x coordinate.</value>
        </member>
        <member name="P:numl.Supervised.NaiveBayes.Statistic.Probability">
            <summary>Gets or sets the probability.</summary>
            <value>The probability.</value>
        </member>
        <member name="P:numl.Supervised.NaiveBayes.Statistic.Conditionals">
            <summary>Gets or sets the conditionals.</summary>
            <value>The conditionals.</value>
        </member>
        <member name="T:numl.Supervised.NeuralNetwork.Edge">
            <summary>An edge.</summary>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Edge.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Edge.Create(numl.Supervised.NeuralNetwork.Node,numl.Supervised.NeuralNetwork.Node)">
            <summary>Creates a new Edge.</summary>
            <param name="source">Source for the.</param>
            <param name="target">Target for the.</param>
            <returns>An Edge.</returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Edge.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Edge.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable
            interface, you should return null (Nothing in Visual Basic) from this method, and instead, if
            specifying a custom schema is required, apply the
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the
            object that is produced by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
            method and consumed by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
            method.
            </returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Edge.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Edge.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Edge.Source">
            <summary>Gets or sets the source for the.</summary>
            <value>The source.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Edge.SourceId">
            <summary>Gets or sets the identifier of the source.</summary>
            <value>The identifier of the source.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Edge.Target">
            <summary>Gets or sets the Target for the.</summary>
            <value>The target.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Edge.TargetId">
            <summary>Gets or sets the identifier of the target.</summary>
            <value>The identifier of the target.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Edge.Weight">
            <summary>Gets or sets the weight.</summary>
            <value>The weight.</value>
        </member>
        <member name="T:numl.Supervised.NeuralNetwork.Network">
            <summary>A network.</summary>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Network.Default(numl.Model.Descriptor,numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector,numl.Math.Functions.IFunction)">
            <summary>Defaults.</summary>
            <param name="d">The Descriptor to process.</param>
            <param name="x">The Vector to process.</param>
            <param name="y">The Vector to process.</param>
            <param name="activation">The activation.</param>
            <returns>A Network.</returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Network.GetLabel(System.Int32,numl.Model.Descriptor)">
            <summary>Gets a label.</summary>
            <param name="n">The Node to process.</param>
            <param name="d">The Descriptor to process.</param>
            <returns>The label.</returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Network.Forward(numl.Math.LinearAlgebra.Vector)">
            <summary>Forwards the given x coordinate.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The Vector to process.</param>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Network.Back(System.Double,System.Double)">
            <summary>Backs.</summary>
            <param name="t">The double to process.</param>
            <param name="learningRate">The learning rate.</param>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Network.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable
            interface, you should return null (Nothing in Visual Basic) from this method, and instead, if
            specifying a custom schema is required, apply the
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the
            object that is produced by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
            method and consumed by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
            method.
            </returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Network.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Network.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="F:numl.Supervised.NeuralNetwork.Network._nodes">
            <summary>The nodes.</summary>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Network.GetNodes">
            <summary>Gets the nodes in this collection.</summary>
            <returns>
            An enumerator that allows foreach to be used to process the nodes in this collection.
            </returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Network.GetNodes(numl.Supervised.NeuralNetwork.Node)">
            <summary>Gets the nodes in this collection.</summary>
            <param name="n">The Node to process.</param>
            <returns>
            An enumerator that allows foreach to be used to process the nodes in this collection.
            </returns>
        </member>
        <member name="F:numl.Supervised.NeuralNetwork.Network._edges">
            <summary>The edges.</summary>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Network.GetEdges">
            <summary>Gets the edges in this collection.</summary>
            <returns>
            An enumerator that allows foreach to be used to process the edges in this collection.
            </returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Network.GetEdges(numl.Supervised.NeuralNetwork.Node)">
            <summary>Gets the edges in this collection.</summary>
            <param name="n">The Node to process.</param>
            <returns>
            An enumerator that allows foreach to be used to process the edges in this collection.
            </returns>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Network.In">
            <summary>Gets or sets the in.</summary>
            <value>The in.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Network.Out">
            <summary>Gets or sets the out.</summary>
            <value>The out.</value>
        </member>
        <member name="T:numl.Supervised.NeuralNetwork.NeuralNetworkGenerator">
            <summary>A neural network generator.</summary>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.NeuralNetworkGenerator.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.NeuralNetworkGenerator.Generate(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Generate model based on a set of examples.</summary>
            <param name="x">The Matrix to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>Model.</returns>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.NeuralNetworkGenerator.LearningRate">
            <summary>Gets or sets the learning rate.</summary>
            <value>The learning rate.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.NeuralNetworkGenerator.MaxIterations">
            <summary>Gets or sets the maximum iterations.</summary>
            <value>The maximum iterations.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.NeuralNetworkGenerator.Activation">
            <summary>Gets or sets the activation.</summary>
            <value>The activation.</value>
        </member>
        <member name="T:numl.Supervised.NeuralNetwork.NeuralNetworkModel">
            <summary>A data Model for the neural network.</summary>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.NeuralNetworkModel.Predict(numl.Math.LinearAlgebra.Vector)">
            <summary>Predicts the given o.</summary>
            <param name="y">The Vector to process.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.NeuralNetworkModel.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is
            serialized.</param>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.NeuralNetworkModel.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is
            deserialized.</param>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.NeuralNetworkModel.Network">
            <summary>Gets or sets the network.</summary>
            <value>The network.</value>
        </member>
        <member name="T:numl.Supervised.NeuralNetwork.Node">
            <summary>A node.</summary>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Node.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Node.Evaluate">
            <summary>Gets the evaluate.</summary>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Node.Error(System.Double)">
            <summary>Errors.</summary>
            <param name="t">The double to process.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Node.Update(System.Double)">
            <summary>Updates the given learningRate.</summary>
            <param name="learningRate">The learning rate.</param>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Node.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Node.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable
            interface, you should return null (Nothing in Visual Basic) from this method, and instead, if
            specifying a custom schema is required, apply the
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the
            object that is produced by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
            method and consumed by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
            method.
            </returns>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Node.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="M:numl.Supervised.NeuralNetwork.Node.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Node.Output">
            <summary>Gets or sets the output.</summary>
            <value>The output.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Node.Input">
            <summary>Gets or sets the input.</summary>
            <value>The input.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Node.Delta">
            <summary>Gets or sets the delta.</summary>
            <value>The delta.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Node.Label">
            <summary>Gets or sets the label.</summary>
            <value>The label.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Node.Id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Node.Out">
            <summary>Gets or sets the out.</summary>
            <value>The out.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Node.In">
            <summary>Gets or sets the in.</summary>
            <value>The in.</value>
        </member>
        <member name="P:numl.Supervised.NeuralNetwork.Node.Activation">
            <summary>Gets or sets the activation.</summary>
            <value>The activation.</value>
        </member>
        <member name="T:numl.Supervised.Perceptron.KernelPerceptronModel">
            <summary>A data Model for the kernel perceptron.</summary>
        </member>
        <member name="M:numl.Supervised.Perceptron.KernelPerceptronModel.Predict(numl.Math.LinearAlgebra.Vector)">
            <summary>Predicts the given o.</summary>
            <param name="y">The Vector to process.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Supervised.Perceptron.KernelPerceptronModel.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="M:numl.Supervised.Perceptron.KernelPerceptronModel.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="P:numl.Supervised.Perceptron.KernelPerceptronModel.Kernel">
            <summary>Gets or sets the kernel.</summary>
            <value>The kernel.</value>
        </member>
        <member name="P:numl.Supervised.Perceptron.KernelPerceptronModel.Y">
            <summary>Gets or sets the y coordinate.</summary>
            <value>The y coordinate.</value>
        </member>
        <member name="P:numl.Supervised.Perceptron.KernelPerceptronModel.A">
            <summary>Gets or sets a.</summary>
            <value>a.</value>
        </member>
        <member name="P:numl.Supervised.Perceptron.KernelPerceptronModel.X">
            <summary>Gets or sets the x coordinate.</summary>
            <value>The x coordinate.</value>
        </member>
        <member name="T:numl.Supervised.Perceptron.PerceptronModel">
            <summary>A data Model for the perceptron.</summary>
        </member>
        <member name="M:numl.Supervised.Perceptron.PerceptronModel.Predict(numl.Math.LinearAlgebra.Vector)">
            <summary>Predicts the given o.</summary>
            <param name="y">The Vector to process.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Supervised.Perceptron.PerceptronModel.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="M:numl.Supervised.Perceptron.PerceptronModel.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="P:numl.Supervised.Perceptron.PerceptronModel.W">
            <summary>Gets or sets the w.</summary>
            <value>The w.</value>
        </member>
        <member name="P:numl.Supervised.Perceptron.PerceptronModel.B">
            <summary>Gets or sets the b.</summary>
            <value>The b.</value>
        </member>
        <member name="P:numl.Supervised.Perceptron.PerceptronModel.Normalized">
            <summary>Gets or sets a value indicating whether the normalized.</summary>
            <value>true if normalized, false if not.</value>
        </member>
        <member name="T:numl.Supervised.NaiveBayes.NaiveBayesModel">
            <summary>A data Model for the naive bayes.</summary>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.NaiveBayesModel.Predict(numl.Math.LinearAlgebra.Vector)">
            <summary>Predicts the given o.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="y">The Vector to process.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.NaiveBayesModel.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="M:numl.Supervised.NaiveBayes.NaiveBayesModel.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="P:numl.Supervised.NaiveBayes.NaiveBayesModel.Root">
            <summary>Gets or sets the root.</summary>
            <value>The root.</value>
        </member>
        <member name="T:numl.Supervised.Perceptron.PerceptronGenerator">
            <summary>A perceptron generator.</summary>
        </member>
        <member name="M:numl.Supervised.Perceptron.PerceptronGenerator.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Supervised.Perceptron.PerceptronGenerator.#ctor(System.Boolean)">
            <summary>Constructor.</summary>
            <param name="normalize">true to normalize.</param>
        </member>
        <member name="M:numl.Supervised.Perceptron.PerceptronGenerator.Generate(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Generate model based on a set of examples.</summary>
            <param name="X">The Matrix to process.</param>
            <param name="Y">The Vector to process.</param>
            <returns>Model.</returns>
        </member>
        <member name="P:numl.Supervised.Perceptron.PerceptronGenerator.Normalize">
            <summary>Gets or sets a value indicating whether the normalize.</summary>
            <value>true if normalize, false if not.</value>
        </member>
        <member name="T:numl.Supervised.Regression.LinearRegressionGenerator">
            <summary>A linear regression generator.</summary>
        </member>
        <member name="M:numl.Supervised.Regression.LinearRegressionGenerator.#ctor">
            <summary>
            Initialise a new LinearRegressionGenerator
            </summary>
        </member>
        <member name="M:numl.Supervised.Regression.LinearRegressionGenerator.Generate(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Generate Linear Regression model based on a set of examples.</summary>
            <param name="x">The Matrix to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>Model.</returns>
        </member>
        <member name="P:numl.Supervised.Regression.LinearRegressionGenerator.Lambda">
            <summary>
            The regularisation term Lambda
            </summary>
        </member>
        <member name="P:numl.Supervised.Regression.LinearRegressionGenerator.LearningRate">
            <summary>Gets or sets the learning rate used with gradient descent.</summary>
            <para>The default value is 0.01</para>
            <value>The learning rate.</value>
        </member>
        <member name="P:numl.Supervised.Regression.LinearRegressionGenerator.MaxIterations">
            <summary>Gets or sets the maximum iterations used with gradient descent.</summary>
            <para>The default is 500</para>
            <value>The maximum iterations.</value>
        </member>
        <member name="T:numl.Supervised.Regression.LinearRegressionModel">
            <summary>
            Linear Regression model
            </summary>
        </member>
        <member name="M:numl.Supervised.Regression.LinearRegressionModel.#ctor">
            <summary>
            Initialises a new LinearRegressionModel object
            </summary>
        </member>
        <member name="M:numl.Supervised.Regression.LinearRegressionModel.#ctor(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>
            Initialises a new LinearRegressionModel object
            </summary>
            <param name="featureAverages">The feature averages for use in scaling test case features</param>
            <param name="featureSdv">The feature standard deviations for use in scaling test case features</param>
        </member>
        <member name="M:numl.Supervised.Regression.LinearRegressionModel.Predict(numl.Math.LinearAlgebra.Vector)">
            <summary>
            Create a prediction based on the learned Theta values and the supplied test item.
            </summary>
            <param name="y">Training record</param>
            <returns></returns>
        </member>
        <member name="M:numl.Supervised.Regression.LinearRegressionModel.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="M:numl.Supervised.Regression.LinearRegressionModel.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="P:numl.Supervised.Regression.LinearRegressionModel.Theta">
            <summary>
            Theta parameters vector mapping X to y.
            </summary>
        </member>
        <member name="P:numl.Supervised.Regression.LinearRegressionModel.FeatureAverages">
            <summary>
            A row vector of the feature averages
            </summary>
        </member>
        <member name="P:numl.Supervised.Regression.LinearRegressionModel.FeatureStandardDeviations">
            <summary>
            A row vector of the standard deviation for each feature
            </summary>
        </member>
        <member name="T:numl.Supervised.Regression.LogisticRegressionGenerator">
            <summary>A logistic regression generator.</summary>
        </member>
        <member name="M:numl.Supervised.Regression.LogisticRegressionGenerator.#ctor">
            <summary>
            Initialises a LogisticRegressionGenerator object
            </summary>
        </member>
        <member name="M:numl.Supervised.Regression.LogisticRegressionGenerator.Generate(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Generate Logistic Regression model based on a set of examples.</summary>
            <param name="x">The Matrix to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>Model.</returns>
        </member>
        <member name="P:numl.Supervised.Regression.LogisticRegressionGenerator.Lambda">
            <summary>
            The regularisation term Lambda
            </summary>
        </member>
        <member name="P:numl.Supervised.Regression.LogisticRegressionGenerator.PolynomialFeatures">
            <summary>
            The additional number of quadratic features to create.
            <para>(A higher value may overfit training data)</para>
            </summary>
        </member>
        <member name="P:numl.Supervised.Regression.LogisticRegressionGenerator.MaxIterations">
            <summary>Gets or sets the maximum iterations used with gradient descent.</summary>
            <para>The default is 500</para>
            <value>The maximum iterations.</value>
        </member>
        <member name="P:numl.Supervised.Regression.LogisticRegressionGenerator.LearningRate">
            <summary>Gets or sets the learning rate used with gradient descent.</summary>
            <para>The default value is 0.01</para>
            <value>The learning rate.</value>
        </member>
        <member name="T:numl.Supervised.Regression.LogisticRegressionModel">
            <summary>
            A Logistic Regression Model object
            </summary>
        </member>
        <member name="M:numl.Supervised.Regression.LogisticRegressionModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:numl.Supervised.Regression.LogisticRegressionModel.Predict(numl.Math.LinearAlgebra.Vector)">
            <summary>
            Create a prediction based on the learned Theta values and the supplied test item.
            </summary>
            <param name="y">Training record</param>
            <returns></returns>
        </member>
        <member name="M:numl.Supervised.Regression.LogisticRegressionModel.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is
            deserialized.</param>
        </member>
        <member name="M:numl.Supervised.Regression.LogisticRegressionModel.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="P:numl.Supervised.Regression.LogisticRegressionModel.Theta">
            <summary>
            Theta parameters vector mapping X to y.
            </summary>
        </member>
        <member name="P:numl.Supervised.Regression.LogisticRegressionModel.LogisticFunction">
            <summary>
            Logistic function
            </summary>
        </member>
        <member name="P:numl.Supervised.Regression.LogisticRegressionModel.PolynomialFeatures">
            <summary>
            The additional number of quadratic features to create as used in generating the model
            </summary>
        </member>
        <member name="T:numl.Unsupervised.Cluster">
            <summary>A cluster.</summary>
        </member>
        <member name="M:numl.Unsupervised.Cluster.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Unsupervised.Cluster.#ctor(System.Int32,numl.Unsupervised.Cluster,numl.Unsupervised.Cluster)">
            <summary>Constructor.</summary>
            <param name="id">The identifier.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:numl.Unsupervised.Cluster.#ctor(System.Int32,System.Collections.Generic.IEnumerable{numl.Unsupervised.Cluster})">
            <summary>Constructor.</summary>
            <param name="id">The identifier.</param>
            <param name="children">The children.</param>
        </member>
        <member name="P:numl.Unsupervised.Cluster.Id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:numl.Unsupervised.Cluster.Points">
            <summary>Gets or sets the points.</summary>
            <value>The points.</value>
        </member>
        <member name="P:numl.Unsupervised.Cluster.Members">
            <summary>Gets or sets the members.</summary>
            <value>The members.</value>
        </member>
        <member name="P:numl.Unsupervised.Cluster.Children">
            <summary>Gets or sets the children.</summary>
            <value>The children.</value>
        </member>
        <member name="P:numl.Unsupervised.Cluster.Center">
            <summary>Gets or sets the center.</summary>
            <value>The center.</value>
        </member>
        <member name="P:numl.Unsupervised.Cluster.Item(System.Int32)">
            <summary>Indexer to get items within this collection using array index syntax.</summary>
            <param name="i">Zero-based index of the entry to access.</param>
            <returns>The indexed item.</returns>
        </member>
        <member name="T:numl.Unsupervised.GMM">
            <summary>A gmm.</summary>
        </member>
        <member name="M:numl.Unsupervised.GMM.Generate(System.Collections.Generic.IEnumerable{System.Object},System.Int32)">
            <summary>Generates.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="examples">The examples.</param>
            <param name="k">The int to process.</param>
        </member>
        <member name="M:numl.Unsupervised.GMM.Generate(numl.Math.LinearAlgebra.Matrix,System.Int32)">
            <summary>Generates.</summary>
            <param name="X">The Matrix to process.</param>
            <param name="k">The int to process.</param>
        </member>
        <member name="M:numl.Unsupervised.GMM.Normal(numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector,numl.Math.LinearAlgebra.Vector)">
            <summary>Compute probability according to multivariate Gaussian.</summary>
            <param name="x">Vector in question.</param>
            <param name="mu">Mean.</param>
            <param name="sigma">diag(covariance)</param>
            <returns>Probability.</returns>
        </member>
        <member name="P:numl.Unsupervised.GMM.Descriptor">
            <summary>Gets or sets the descriptor.</summary>
            <value>The descriptor.</value>
        </member>
        <member name="T:numl.Unsupervised.HClusterModel">
            <summary>A data Model for the cluster.</summary>
        </member>
        <member name="M:numl.Unsupervised.HClusterModel.Generate(numl.Model.Descriptor,System.Collections.Generic.IEnumerable{System.Object},numl.Math.Linkers.ILinker)">
            <summary>Generates.</summary>
            <param name="desc">The description.</param>
            <param name="examples">The examples.</param>
            <param name="linker">The linker.</param>
            <returns>A Cluster.</returns>
        </member>
        <member name="M:numl.Unsupervised.HClusterModel.Generate(numl.Math.LinearAlgebra.Matrix,numl.Math.Linkers.ILinker)">
            <summary>Generates.</summary>
            <param name="x">The Matrix to process.</param>
            <param name="linker">The linker.</param>
            <returns>A Cluster.</returns>
        </member>
        <member name="M:numl.Unsupervised.HClusterModel.GenerateClustering(numl.Math.LinearAlgebra.Matrix,numl.Math.Linkers.ILinker,System.Object[])">
            <summary>Generates a clustering.</summary>
            <param name="X">The Matrix to process.</param>
            <param name="linker">The linker.</param>
            <param name="data">(Optional) the data.</param>
            <returns>The clustering.</returns>
        </member>
        <member name="P:numl.Unsupervised.HClusterModel.Descriptor">
            <summary>Gets or sets the descriptor.</summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:numl.Unsupervised.HClusterModel.Linker">
            <summary>Gets or sets the linker.</summary>
            <value>The linker.</value>
        </member>
        <member name="T:numl.Math.LinearAlgebra.Conversions">
            <summary>A conversions.</summary>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Conversions.Build(System.Double[][],System.Boolean)">
            <summary>Builds.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="x">The double[][] to process.</param>
            <param name="clip">(Optional) true to clip.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Conversions.ToMatrix(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            An IEnumerable&lt;IEnumerable&lt;double&gt;&gt; extension method that converts a matrix to a
            matrix.
            </summary>
            <param name="matrix">The matrix to act on.</param>
            <returns>matrix as a Matrix.</returns>
        </member>
        <member name="M:numl.Math.LinearAlgebra.Conversions.ToExamples(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            An IEnumerable&lt;IEnumerable&lt;double&gt;&gt; extension method that converts a matrix to
            the examples.
            </summary>
            <param name="matrix">The matrix to act on.</param>
            <returns>matrix as a Tuple&lt;Matrix,Vector&gt;</returns>
        </member>
        <member name="T:numl.Model.Descriptor">
            <summary>
            This class is designed to describe the underlying types that will be used in the machine
            learning process. Any machine learning process requires a set of <see cref="P:numl.Model.Descriptor.Features"/> that
            will be used to discriminate the <see cref="P:numl.Model.Descriptor.Label"/>. The <see cref="P:numl.Model.Descriptor.Label"/> itself is the
            target element that the machine learning algorithms learn to predict.
            </summary>
        </member>
        <member name="M:numl.Model.Descriptor.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Model.Descriptor.GetColumns">
            <summary>
            Available column names used to discriminate or learn about <see cref="P:numl.Model.Descriptor.Label"/>. The number of
            columns does not necessarily equal the number of <see cref="P:numl.Model.Descriptor.Features"/> given that there
            might exist multi-valued features.
            </summary>
            <returns>
            An enumerator that allows foreach to be used to process the columns in this collection.
            </returns>
        </member>
        <member name="F:numl.Model.Descriptor._vectorLength">
            <summary>Length of the vector.</summary>
        </member>
        <member name="M:numl.Model.Descriptor.At(System.Int32)">
            <summary>Gets related property given its offset within the vector representation.</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is outside the required
            range.</exception>
            <param name="i">Vector Index.</param>
            <returns>Associated Feature.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.ColumnAt(System.Int32)">
            <summary>
            Gets related property column name given its offset within the vector representation.
            </summary>
            <param name="i">Vector Index.</param>
            <returns>Associated Property Name.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.Convert(System.Object)">
            <summary>
            Converts a given example into a lazy list of doubles in preparation for vector conversion
            (both features and corresponding label)
            </summary>
            <param name="item">Example.</param>
            <returns>Lazy List of doubles.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.Convert(System.Object,System.Boolean)">
            <summary>
            Converts a given example into a lazy list of doubles in preparation for vector conversion.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="item">Example.</param>
            <param name="withLabel">Should convert label as well.</param>
            <returns>Lazy List of doubles.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.Convert(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Converts a list of examples into a lazy double list of doubles.</summary>
            <param name="items">Examples.</param>
            <returns>Lazy double enumerable of doubles.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.ToExamples(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Converts a list of examples into a Matrix/Vector tuple.</summary>
            <param name="examples">Examples.</param>
            <returns>Tuple containing Matrix and Vector.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.ToMatrix(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Converts a list of examples into a Matrix.</summary>
            <param name="examples">Examples.</param>
            <returns>Matrix representation.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.ToVector(System.Object)">
            <summary>
            Convert an object to its vector representation based on the descriptor properties.
            </summary>
            <param name="item">object to convert.</param>
            <returns>Vector representation.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.ToString">
            <summary>Pretty printed descriptor.</summary>
            <returns>Pretty printed string.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.Create``1">
             <summary>Creates a descriptor based upon a marked up concrete class.</summary>
             <tparam name="T">Generic type parameter.</tparam>
             <returns>Descriptor.</returns>
            
             ### <typeparam name="T">Class Type.</typeparam>
        </member>
        <member name="M:numl.Model.Descriptor.Create(System.Type)">
            <summary>Creates a descriptor based upon a marked up concrete type.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="t">Class Type.</param>
            <returns>Descriptor.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.New">
            <summary>
            Creates a new descriptor using a fluent approach. This initial descriptor is worthless
            without adding features.
            </summary>
            <returns>Empty Descriptor.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.New(System.String)">
            <summary>
            Creates a new descriptor using a fluent approach. This initial descriptor is worthless
            without adding features.
            </summary>
            <param name="name">Desired name.</param>
            <returns>Empty Named Descriptor.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.New(System.Type)">
            <summary>
            Creates a new descriptor using a fluent approach. This initial descriptor is worthless
            without adding features.
            </summary>
            <param name="type">Type mapping.</param>
            <returns>A Descriptor.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.For``1">
             <summary>
             Creates a new descriptor using a strongly typed fluent approach. This initial descriptor is
             worthless without adding features.
             </summary>
             <tparam name="T">Generic type parameter.</tparam>
             <returns>Empty Descriptor.</returns>
            
             ### <typeparam name="T">Source Object Type.</typeparam>
        </member>
        <member name="M:numl.Model.Descriptor.For``1(System.String)">
             <summary>
             Creates a new descriptor using a strongly typed fluent approach. This initial descriptor is
             worthless without adding features.
             </summary>
             <tparam name="T">Generic type parameter.</tparam>
             <param name="name">Desired Descriptor Name.</param>
             <returns>Empty Descriptor.</returns>
            
             ### <typeparam name="T">Source Object Type.</typeparam>
        </member>
        <member name="M:numl.Model.Descriptor.Load(System.String)">
            <summary>Load a descriptor from a file.</summary>
            <param name="file">File Location.</param>
            <returns>Descriptor.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.Load(System.IO.Stream)">
            <summary>Load a descriptor from a stream.</summary>
            <param name="stream">Stream.</param>
            <returns>Descriptor.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.With(System.String)">
            <summary>Adds a new feature to descriptor.</summary>
            <param name="name">Name of feature (must match property name or dictionary key)</param>
            <returns>method for describing feature.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.Learn(System.String)">
            <summary>Adds (or replaces) a label to the descriptor.</summary>
            <param name="name">Name of label (must match property name or dictionary key)</param>
            <returns>A DescriptorProperty.</returns>
        </member>
        <member name="M:numl.Model.Descriptor.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable
            interface, you should return null (Nothing in Visual Basic) from this method, and instead, if
            specifying a custom schema is required, apply the
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the
            object that is produced by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
            method and consumed by the
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
            method.
            </returns>
        </member>
        <member name="M:numl.Model.Descriptor.ReadXml(System.Xml.XmlReader)">
            <summary>Generates an object from its XML representation.</summary>
            <exception cref="T:System.TypeLoadException">Thrown when a Type Load error condition occurs.</exception>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is
            deserialized.</param>
        </member>
        <member name="M:numl.Model.Descriptor.WriteXml(System.Xml.XmlWriter)">
            <summary>Converts an object into its XML representation.</summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is
            serialized.</param>
        </member>
        <member name="P:numl.Model.Descriptor.Name">
            <summary>Descriptor name.</summary>
            <value>The name.</value>
        </member>
        <member name="P:numl.Model.Descriptor.Features">
            <summary>
            Set of features used to discriminate or learn about the <see cref="P:numl.Model.Descriptor.Label"/>.
            </summary>
            <value>The features.</value>
        </member>
        <member name="P:numl.Model.Descriptor.Label">
            <summary>Target property that is the target of machine learning.</summary>
            <value>The label.</value>
        </member>
        <member name="P:numl.Model.Descriptor.Item(System.Int32)">
            <summary>Index into features (for convenience)</summary>
            <param name="i">Feature index.</param>
            <returns>Feature Property.</returns>
        </member>
        <member name="P:numl.Model.Descriptor.Item(System.String)">
            <summary>Index intor features (for convenience)</summary>
            <param name="name">Feature name.</param>
            <returns>Feature Property.</returns>
        </member>
        <member name="P:numl.Model.Descriptor.VectorLength">
            <summary>
            Total feature count The number of features does not necessarily equal the number of
            <see cref="P:numl.Model.Descriptor.Features"/> given that there might exist multi-valued features.
            </summary>
            <value>The length of the vector.</value>
        </member>
        <member name="P:numl.Model.Descriptor.Type">
            <summary>Base type of object being described. This could also be null.</summary>
            <value>The type.</value>
        </member>
        <member name="T:numl.Model.Descriptor`1">
            <summary>A descriptor.</summary>
            <tparam name="T">Generic type parameter.</tparam>
        </member>
        <member name="M:numl.Model.Descriptor`1.#ctor">
            <summary>Initializes a new instance of the Descriptor class.</summary>
        </member>
        <member name="M:numl.Model.Descriptor`1.AddProperty(numl.Model.Property,System.Boolean)">
            <summary>Adds a property to 'label'.</summary>
            <param name="p">The Property to process.</param>
            <param name="label">true to label.</param>
        </member>
        <member name="M:numl.Model.Descriptor`1.GetPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Gets property information.</summary>
            <tparam name="K">Generic type parameter.</tparam>
            <param name="property">The property.</param>
            <returns>The property information.</returns>
        </member>
        <member name="M:numl.Model.Descriptor`1.With(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Withs the given property.</summary>
            <param name="property">The property.</param>
            <returns>A Descriptor&lt;T&gt;</returns>
        </member>
        <member name="M:numl.Model.Descriptor`1.WithString(System.Linq.Expressions.Expression{System.Func{`0,System.String}},numl.Model.StringSplitType,System.String,System.Boolean,System.String)">
            <summary>With string.</summary>
            <param name="property">The property.</param>
            <param name="splitType">Type of the split.</param>
            <param name="separator">(Optional) the separator.</param>
            <param name="asEnum">(Optional) true to as enum.</param>
            <param name="exclusions">(Optional) the exclusions.</param>
            <returns>A Descriptor&lt;T&gt;</returns>
        </member>
        <member name="M:numl.Model.Descriptor`1.WithDateTime(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}},numl.Model.DateTimeFeature)">
            <summary>With date time.</summary>
            <param name="property">The property.</param>
            <param name="features">The features.</param>
            <returns>A Descriptor&lt;T&gt;</returns>
        </member>
        <member name="M:numl.Model.Descriptor`1.WithDateTime(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}},numl.Model.DatePortion)">
            <summary>With date time.</summary>
            <param name="property">The property.</param>
            <param name="portion">The portion.</param>
            <returns>A Descriptor&lt;T&gt;</returns>
        </member>
        <member name="M:numl.Model.Descriptor`1.WithEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.IEnumerable}},System.Int32)">
            <summary>With enumerable.</summary>
            <param name="property">The property.</param>
            <param name="length">The length.</param>
            <returns>A Descriptor&lt;T&gt;</returns>
        </member>
        <member name="M:numl.Model.Descriptor`1.Learn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Learns the given property.</summary>
            <param name="property">The property.</param>
            <returns>A Descriptor&lt;T&gt;</returns>
        </member>
        <member name="T:numl.Unsupervised.KMeans">
            <summary>A means.</summary>
        </member>
        <member name="M:numl.Unsupervised.KMeans.Generate(numl.Model.Descriptor,System.Collections.Generic.IEnumerable{System.Object},System.Int32,numl.Math.Metrics.IDistance)">
            <summary>Generates.</summary>
            <param name="descriptor">The descriptor.</param>
            <param name="examples">The examples.</param>
            <param name="k">The int to process.</param>
            <param name="metric">(Optional) the metric.</param>
            <returns>An int[].</returns>
        </member>
        <member name="M:numl.Unsupervised.KMeans.Generate(numl.Math.LinearAlgebra.Matrix,System.Int32,numl.Math.Metrics.IDistance)">
            <summary>Generates.</summary>
            <param name="x">The Matrix to process.</param>
            <param name="k">The int to process.</param>
            <param name="metric">the metric.</param>
            <returns>An int[].</returns>
        </member>
        <member name="M:numl.Unsupervised.KMeans.Generate(System.Collections.Generic.IEnumerable{System.Object},System.Int32,numl.Math.Metrics.IDistance)">
            <summary>Generates.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="examples">The examples.</param>
            <param name="k">The int to process.</param>
            <param name="metric">(Optional) the metric.</param>
            <returns>An int[].</returns>
        </member>
        <member name="M:numl.Unsupervised.KMeans.InitializeUniform(numl.Math.LinearAlgebra.Matrix,System.Int32)">
            <summary>Initializes the uniform.</summary>
            <param name="X">The Matrix to process.</param>
            <param name="k">The int to process.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:numl.Unsupervised.KMeans.InitializeRandom(numl.Math.LinearAlgebra.Matrix,System.Int32)">
            <summary>Initializes the random.</summary>
            <param name="X">The Matrix to process.</param>
            <param name="k">The int to process.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="P:numl.Unsupervised.KMeans.Descriptor">
            <summary>Gets or sets the descriptor.</summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:numl.Unsupervised.KMeans.Centers">
            <summary>Gets or sets the centers.</summary>
            <value>The centers.</value>
        </member>
        <member name="P:numl.Unsupervised.KMeans.X">
            <summary>Gets or sets the x coordinate.</summary>
            <value>The x coordinate.</value>
        </member>
        <member name="T:numl.Unsupervised.PCA">
            <summary>A pca.</summary>
        </member>
        <member name="M:numl.Unsupervised.PCA.Generate(numl.Math.LinearAlgebra.Matrix)">
            <summary>Generates.</summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:numl.Unsupervised.PCA.Generate(numl.Model.Descriptor,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Generates.</summary>
            <param name="descriptor">The descriptor.</param>
            <param name="examples">The examples.</param>
        </member>
        <member name="M:numl.Unsupervised.PCA.Reduce(System.Int32)">
            <summary>Reduces.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="maxdim">The maxdim.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="P:numl.Unsupervised.PCA.Eigenvalues">
            <summary>Gets or sets the eigenvalues.</summary>
            <value>The eigenvalues.</value>
        </member>
        <member name="P:numl.Unsupervised.PCA.Eigenvectors">
            <summary>Gets or sets the eigenvectors.</summary>
            <value>The eigenvectors.</value>
        </member>
        <member name="P:numl.Unsupervised.PCA.X">
            <summary>Gets or sets the x coordinate.</summary>
            <value>The x coordinate.</value>
        </member>
        <member name="P:numl.Unsupervised.PCA.Reduced">
            <summary>Gets or sets the reduced.</summary>
            <value>The reduced.</value>
        </member>
        <member name="T:numl.Utils.DictionaryHelpers">
            <summary>A dictionary helpers.</summary>
        </member>
        <member name="M:numl.Utils.DictionaryHelpers.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>A Dictionary&lt;K,V&gt; extension method that adds an or update.</summary>
            <tparam name="K">Generic type parameter.</tparam>
            <tparam name="V">Generic type parameter.</tparam>
            <param name="dictionary">The dictionary to act on.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:numl.Utils.DictionaryHelpers.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1,``1})">
            <summary>A Dictionary&lt;K,V&gt; extension method that adds an or update.</summary>
            <tparam name="K">Generic type parameter.</tparam>
            <tparam name="V">Generic type parameter.</tparam>
            <param name="dictionary">The dictionary to act on.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:numl.Utils.DictionaryHelpers.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1,``1},``1)">
            <summary>A Dictionary&lt;K,V&gt; extension method that adds an or update.</summary>
            <tparam name="K">Generic type parameter.</tparam>
            <tparam name="V">Generic type parameter.</tparam>
            <param name="dictionary">The dictionary to act on.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="seed">The seed.</param>
        </member>
        <member name="T:numl.Utils.EnumerableHelpers">
            <summary>
            Extension methods for IEnumerable collections
            </summary>
        </member>
        <member name="M:numl.Utils.EnumerableHelpers.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Boolean)">
            <summary>
            Calculates the standard deviation on the source collection
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="fnPropSelector"></param>
            <param name="isSamplePopulation"></param>
            <returns></returns>
        </member>
        <member name="M:numl.Utils.EnumerableHelpers.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Boolean)">
            <summary>
            Calculates the variance on the source collection
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="fnPropSelector"></param>
            <param name="isSamplePopulation"></param>
            <returns></returns>
        </member>
        <member name="T:numl.Utils.Ject">
            <summary>This class is used for fast reflection over types.</summary>
        </member>
        <member name="F:numl.Utils.Ject.accessors">
            <summary>The accessors.</summary>
        </member>
        <member name="F:numl.Utils.Ject.setters">
            <summary>The setters.</summary>
        </member>
        <member name="F:numl.Utils.Ject.ctors">
            <summary>Constructors</summary>
        </member>
        <member name="M:numl.Utils.Ject.GetAccessor(System.Type,System.String)">
            <summary>Gets an accessor.</summary>
            <param name="type">The type.</param>
            <param name="valueName">Name of the value.</param>
            <returns>The accessor.</returns>
        </member>
        <member name="M:numl.Utils.Ject.CreateAccessor(System.Type,System.String)">
            <summary>Creates an accessor.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="type">The type.</param>
            <param name="valueName">Name of the value.</param>
            <returns>The new accessor.</returns>
        </member>
        <member name="M:numl.Utils.Ject.GetSetter(System.Type,System.String)">
            <summary>Gets a setter.</summary>
            <param name="type">The type.</param>
            <param name="valueName">Name of the value.</param>
            <returns>The setter.</returns>
        </member>
        <member name="M:numl.Utils.Ject.CreateSetter(System.Type,System.String)">
            <summary>Creates a setter.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="type">The type.</param>
            <param name="valueName">Name of the value.</param>
            <returns>The new setter.</returns>
        </member>
        <member name="M:numl.Utils.Ject.Get(System.Object,System.String)">
            <summary>Get a property value dynamically from an object.</summary>
            <param name="o">object.</param>
            <param name="name">parameter to extract.</param>
            <returns>parameter value.</returns>
        </member>
        <member name="M:numl.Utils.Ject.GetCtor(System.Type)">
            <summary>
            Gets (or creates) fast path to an empty
            ctor of a provided type
            </summary>
            <param name="type">provided type</param>
            <returns>constructor</returns>
        </member>
        <member name="M:numl.Utils.Ject.Create(System.Type)">
            <summary>
            Creates a type with an empty ctor. Faster
            than Activator.CreateInstance
            </summary>
            <param name="type">Type to create (must have empty ctor)</param>
            <returns>Created type</returns>
        </member>
        <member name="M:numl.Utils.Ject.Get``1(System.Collections.IEnumerable,System.String)">
             <summary>Get a property value dynamically from a set of objects.</summary>
             <tparam name="T">Generic type parameter.</tparam>
             <param name="items">set of objects.</param>
             <param name="name">paramater to extract.</param>
             <returns>lazy list of parameter values.</returns>
            
             ### <typeparam name="T">Type of value to return.</typeparam>
        </member>
        <member name="M:numl.Utils.Ject.Get(System.Collections.IEnumerable,System.String,System.Type)">
            <summary>Get a property value dynamically from an object.</summary>
            <param name="items">set of objects.</param>
            <param name="name">parameter to extract.</param>
            <param name="cast">The cast.</param>
            <returns>parameter value.</returns>
        </member>
        <member name="M:numl.Utils.Ject.Set(System.Object,System.String,System.Object)">
            <summary>Sets.</summary>
            <param name="o">object.</param>
            <param name="name">parameter to extract.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:numl.Utils.Ject.CanUseSimpleType(System.Type)">
            <summary>Determine if we can use simple type.</summary>
            <param name="t">The Type to process.</param>
            <returns>true if we can use simple type, false if not.</returns>
        </member>
        <member name="M:numl.Utils.Ject.Convert(System.Object)">
            <summary>
            Conversion of standard univariate types. Will throw exception on all multivariate types.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown when an object cannot be cast to a required
            type.</exception>
            <param name="o">value in question.</param>
            <returns>double representation.</returns>
        </member>
        <member name="M:numl.Utils.Ject.Convert(System.Double,System.Type)">
            <summary>
            Conversion of standard univariate types. Will throw exception on all multivariate types.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown when an object cannot be cast to a required
            type.</exception>
            <param name="val">The value.</param>
            <param name="t">The Type to process.</param>
            <returns>double representation.</returns>
        </member>
        <member name="F:numl.Utils.Ject._types">
            <summary>The types.</summary>
        </member>
        <member name="M:numl.Utils.Ject.FindType(System.String)">
            <summary>Searches for the first type.</summary>
            <exception cref="T:System.TypeLoadException">Thrown when a Type Load error condition occurs.</exception>
            <param name="s">The string.</param>
            <returns>The found type.</returns>
        </member>
        <member name="F:numl.Utils.Ject._descendants">
            <summary>The descendants.</summary>
        </member>
        <member name="M:numl.Utils.Ject.FindAllAssignableFrom(System.Type)">
            <summary>Searches for all assignable from.</summary>
            <param name="type">The type.</param>
            <returns>The found all assignable from.</returns>
        </member>
        <member name="M:numl.Utils.Ject.GetTypesSafe(System.Reflection.Assembly)">
            <summary>Gets the types safes in this collection.</summary>
            <param name="a">a to act on.</param>
            <returns>
            An enumerator that allows foreach to be used to process the types safes in this collection.
            </returns>
        </member>
        <member name="T:numl.Model.NumlAttribute">
            <summary>Attribute for numl.</summary>
        </member>
        <member name="M:numl.Model.NumlAttribute.GenerateProperty(System.Reflection.PropertyInfo)">
            <summary>Generates a property.</summary>
            <param name="property">The property.</param>
            <returns>The property.</returns>
        </member>
        <member name="T:numl.Model.FeatureAttribute">
            <summary>Attribute for feature.</summary>
        </member>
        <member name="T:numl.Model.LabelAttribute">
            <summary>Attribute for label.</summary>
        </member>
        <member name="M:numl.Model.LabelAttribute.GenerateProperty(System.Reflection.PropertyInfo)">
            <summary>Generates a property.</summary>
            <param name="property">The property.</param>
            <returns>The property.</returns>
        </member>
        <member name="T:numl.Model.StringFeatureAttribute">
            <summary>Attribute for string feature.</summary>
        </member>
        <member name="M:numl.Model.StringFeatureAttribute.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:numl.Model.StringFeatureAttribute.#ctor(numl.Model.StringSplitType,System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="splitType">Type of the split.</param>
            <param name="separator">(Optional) the separator.</param>
            <param name="exclusions">(Optional) the exclusions.</param>
        </member>
        <member name="M:numl.Model.StringFeatureAttribute.#ctor(System.Boolean)">
            <summary>Constructor.</summary>
            <param name="asEnum">true to as enum.</param>
        </member>
        <member name="M:numl.Model.StringFeatureAttribute.GenerateProperty(System.Reflection.PropertyInfo)">
            <summary>Generates a property.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="property">The property.</param>
            <returns>The property.</returns>
        </member>
        <member name="P:numl.Model.StringFeatureAttribute.SplitType">
            <summary>Gets or sets the type of the split.</summary>
            <value>The type of the split.</value>
        </member>
        <member name="P:numl.Model.StringFeatureAttribute.Separator">
            <summary>Gets or sets the separator.</summary>
            <value>The separator.</value>
        </member>
        <member name="P:numl.Model.StringFeatureAttribute.ExclusionFile">
            <summary>Gets or sets the exclusion file.</summary>
            <value>The exclusion file.</value>
        </member>
        <member name="P:numl.Model.StringFeatureAttribute.AsEnum">
            <summary>Gets or sets a value indicating whether as enum.</summary>
            <value>true if as enum, false if not.</value>
        </member>
        <member name="T:numl.Model.StringLabelAttribute">
            <summary>Attribute for string label.</summary>
        </member>
        <member name="T:numl.Model.DateFeatureAttribute">
            <summary>Attribute for date feature.</summary>
        </member>
        <member name="F:numl.Model.DateFeatureAttribute.dp">
            <summary>The dp.</summary>
        </member>
        <member name="M:numl.Model.DateFeatureAttribute.#ctor(numl.Model.DateTimeFeature)">
            <summary>Constructor.</summary>
            <param name="features">The features.</param>
        </member>
        <member name="M:numl.Model.DateFeatureAttribute.#ctor(numl.Model.DatePortion)">
            <summary>Constructor.</summary>
            <param name="portion">The portion.</param>
        </member>
        <member name="M:numl.Model.DateFeatureAttribute.GenerateProperty(System.Reflection.PropertyInfo)">
            <summary>Generates a property.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="property">The property.</param>
            <returns>The property.</returns>
        </member>
        <member name="T:numl.Model.EnumerableFeatureAttribute">
            <summary>Attribute for enumerable feature.</summary>
        </member>
        <member name="F:numl.Model.EnumerableFeatureAttribute._length">
            <summary>The length.</summary>
        </member>
        <member name="M:numl.Model.EnumerableFeatureAttribute.#ctor(System.Int32)">
            <summary>Constructor.</summary>
            <param name="length">The length.</param>
        </member>
        <member name="M:numl.Model.EnumerableFeatureAttribute.GenerateProperty(System.Reflection.PropertyInfo)">
            <summary>Generates a property.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="property">The property.</param>
            <returns>The property.</returns>
        </member>
        <member name="T:numl.Utils.StringHelpers">
            <summary>A string helpers.</summary>
        </member>
        <member name="F:numl.Utils.StringHelpers.EMPTY_STRING">
            <summary>The empty string.</summary>
        </member>
        <member name="F:numl.Utils.StringHelpers.NUMBER_STRING">
            <summary>Number of strings.</summary>
        </member>
        <member name="F:numl.Utils.StringHelpers.SYMBOL_STRING">
            <summary>The symbol string.</summary>
        </member>
        <member name="M:numl.Utils.StringHelpers.Sanitize(System.String,System.Boolean)">
            <summary>A string extension method that sanitizes.</summary>
            <param name="s">string.</param>
            <param name="checkNumber">(Optional) true to check number.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:numl.Utils.StringHelpers.GetChars(System.String,System.String[])">
            <summary>Lazy list of available characters in a given string.</summary>
            <param name="s">string.</param>
            <param name="exclusions">(Optional) characters to ignore.</param>
            <returns>returns key value.</returns>
        </member>
        <member name="M:numl.Utils.StringHelpers.GetWords(System.String,System.String,System.String[])">
            <summary>Lazy list of available words in a string.</summary>
            <param name="s">input string.</param>
            <param name="separator">(Optional) separator string.</param>
            <param name="exclusions">(Optional) excluded words.</param>
            <returns>key words.</returns>
        </member>
        <member name="M:numl.Utils.StringHelpers.GetWordCount(System.String,numl.Model.StringProperty)">
            <summary>Gets word count.</summary>
            <param name="item">The item.</param>
            <param name="property">The property.</param>
            <returns>An array of double.</returns>
        </member>
        <member name="M:numl.Utils.StringHelpers.GetWordPosition(System.String,System.String[],System.Boolean)">
            <summary>Gets word position.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="item">The item.</param>
            <param name="dictionary">The dictionary.</param>
            <param name="checkNumber">(Optional) true to check number.</param>
            <returns>The word position.</returns>
        </member>
        <member name="M:numl.Utils.StringHelpers.BuildCharDictionary(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>Builds character dictionary.</summary>
            <param name="examples">The examples.</param>
            <param name="exclusion">(Optional) the exclusion.</param>
            <returns>A Dictionary&lt;string,double&gt;</returns>
        </member>
        <member name="M:numl.Utils.StringHelpers.BuildEnumDictionary(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Builds enum dictionary.</summary>
            <param name="examples">The examples.</param>
            <returns>A Dictionary&lt;string,double&gt;</returns>
        </member>
        <member name="M:numl.Utils.StringHelpers.BuildWordDictionary(System.Collections.Generic.IEnumerable{System.String},System.String,System.String[])">
            <summary>Builds word dictionary.</summary>
            <param name="examples">The examples.</param>
            <param name="separator">(Optional) separator string.</param>
            <param name="exclusion">(Optional) the exclusion.</param>
            <returns>A Dictionary&lt;string,double&gt;</returns>
        </member>
        <member name="T:numl.Supervised.ModelEventArgs">
            <summary>Additional information for model events.</summary>
        </member>
        <member name="M:numl.Supervised.ModelEventArgs.#ctor(numl.Supervised.IModel,System.String)">
            <summary>Constructor.</summary>
            <param name="model">The model.</param>
            <param name="message">(Optional) the message.</param>
        </member>
        <member name="M:numl.Supervised.ModelEventArgs.Make(numl.Supervised.IModel,System.String)">
            <summary>Makes.</summary>
            <param name="model">The model.</param>
            <param name="message">(Optional) the message.</param>
            <returns>The ModelEventArgs.</returns>
        </member>
        <member name="P:numl.Supervised.ModelEventArgs.Model">
            <summary>Gets or sets the model.</summary>
            <value>The model.</value>
        </member>
        <member name="P:numl.Supervised.ModelEventArgs.Message">
            <summary>Gets or sets the message.</summary>
            <value>The message.</value>
        </member>
        <member name="T:numl.Supervised.DecisionTree.Node">
            <summary>A node.</summary>
        </member>
        <member name="M:numl.Supervised.DecisionTree.Node.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Node.IsLeaf">
            <summary>if is a leaf.</summary>
            <value>true if this object is leaf, false if not.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Node.Value">
            <summary>Gets or sets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Node.Label">
            <summary>Gets or sets the label.</summary>
            <value>The label.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Node.Column">
            <summary>Gets or sets the column.</summary>
            <value>The column.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Node.Name">
            <summary>Gets or sets the name.</summary>
            <value>The name.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Node.Gain">
            <summary>Gets or sets the gain.</summary>
            <value>The gain.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Node.Edges">
            <summary>Gets or sets the edges.</summary>
            <value>The edges.</value>
        </member>
        <member name="T:numl.Supervised.DecisionTree.Edge">
            <summary>An edge.</summary>
        </member>
        <member name="M:numl.Supervised.DecisionTree.Edge.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Edge.Min">
            <summary>Gets or sets the minimum.</summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Edge.Max">
            <summary>Gets or sets the maximum.</summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Edge.Discrete">
            <summary>Gets or sets a value indicating whether the discrete.</summary>
            <value>true if discrete, false if not.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Edge.Label">
            <summary>Gets or sets the label.</summary>
            <value>The label.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Edge.Parent">
            <summary>Gets or sets the parent.</summary>
            <value>The parent.</value>
        </member>
        <member name="P:numl.Supervised.DecisionTree.Edge.Child">
            <summary>Gets or sets the child.</summary>
            <value>The child.</value>
        </member>
        <member name="T:numl.Utils.TypeHelpers">
            <summary>A type helpers.</summary>
        </member>
        <member name="M:numl.Utils.TypeHelpers.GenerateFeature(System.Type,System.String)">
            <summary>Generates a feature.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns>The feature.</returns>
        </member>
        <member name="M:numl.Utils.TypeHelpers.GenerateLabel(System.Type,System.String)">
            <summary>Generates a label.</summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns>The label.</returns>
        </member>
        <member name="T:numl.Utils.Xml">
            <summary>Xml serialization helper.</summary>
        </member>
        <member name="M:numl.Utils.Xml.Save``1(System.String,``0)">
             <summary>Save object to file.</summary>
             <tparam name="T">Generic type parameter.</tparam>
             <param name="file">file.</param>
             <param name="o">object.</param>
            
             ### <typeparam name="T">Type.</typeparam>
        </member>
        <member name="M:numl.Utils.Xml.Save(System.String,System.Object,System.Type)">
            <summary>Save object to file.</summary>
            <param name="file">file.</param>
            <param name="o">object.</param>
            <param name="t">type.</param>
        </member>
        <member name="M:numl.Utils.Xml.Save``1(System.IO.Stream,``0)">
            <summary>Save object to file.</summary>
            <tparam name="T">Generic type parameter.</tparam>
            <param name="stream">The stream.</param>
            <param name="o">object.</param>
        </member>
        <member name="M:numl.Utils.Xml.Save(System.IO.Stream,System.Object,System.Type)">
            <summary>Save object to file.</summary>
            <param name="stream">The stream.</param>
            <param name="o">object.</param>
            <param name="t">type.</param>
        </member>
        <member name="M:numl.Utils.Xml.ToXmlString``1(``0)">
            <summary>Converts an o to an XML string.</summary>
            <tparam name="T">Generic type parameter.</tparam>
            <param name="o">object.</param>
            <returns>o as a string.</returns>
        </member>
        <member name="M:numl.Utils.Xml.ToXmlString(System.Object,System.Type)">
            <summary>Converts this object to an XML string.</summary>
            <param name="o">object.</param>
            <param name="t">type.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:numl.Utils.Xml.Load``1(System.String)">
            <summary>Loads the given stream.</summary>
            <tparam name="T">Generic type parameter.</tparam>
            <param name="file">file.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:numl.Utils.Xml.Load(System.String,System.Type)">
            <summary>Loads.</summary>
            <param name="file">file.</param>
            <param name="t">type.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Utils.Xml.Load``1(System.IO.Stream)">
            <summary>Loads the given stream.</summary>
            <tparam name="T">Generic type parameter.</tparam>
            <param name="stream">The stream.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:numl.Utils.Xml.Load(System.IO.Stream,System.Type)">
            <summary>Loads.</summary>
            <param name="stream">The stream.</param>
            <param name="t">type.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:numl.Utils.Xml.LoadXmlString``1(System.String)">
            <summary>Loads XML string.</summary>
            <tparam name="T">Generic type parameter.</tparam>
            <param name="xml">The XML.</param>
            <returns>The XML string.</returns>
        </member>
        <member name="M:numl.Utils.Xml.LoadXmlString(System.String,System.Type)">
            <summary>Loads XML string.</summary>
            <param name="xml">The XML.</param>
            <param name="t">type.</param>
            <returns>The XML string.</returns>
        </member>
        <member name="M:numl.Utils.Xml.Write``1(System.Xml.XmlWriter,``0)">
            <summary>Writes.</summary>
            <tparam name="T">Generic type parameter.</tparam>
            <param name="writer">The writer.</param>
            <param name="thing">The thing.</param>
        </member>
        <member name="M:numl.Utils.Xml.Read``1(System.Xml.XmlReader)">
            <summary>Reads the given reader.</summary>
            <tparam name="T">Generic type parameter.</tparam>
            <param name="reader">The reader.</param>
            <returns>A T.</returns>
        </member>
        <member name="T:numl.Supervised.Perceptron.KernelPerceptronGenerator">
            <summary>A kernel perceptron generator.</summary>
        </member>
        <member name="M:numl.Supervised.Perceptron.KernelPerceptronGenerator.#ctor(numl.Math.Kernels.IKernel)">
            <summary>Constructor.</summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="M:numl.Supervised.Perceptron.KernelPerceptronGenerator.Generate(numl.Math.LinearAlgebra.Matrix,numl.Math.LinearAlgebra.Vector)">
            <summary>Generate model based on a set of examples.</summary>
            <param name="x">The Matrix to process.</param>
            <param name="y">The Vector to process.</param>
            <returns>Model.</returns>
        </member>
        <member name="P:numl.Supervised.Perceptron.KernelPerceptronGenerator.Kernel">
            <summary>Gets or sets the kernel.</summary>
            <value>The kernel.</value>
        </member>
    </members>
</doc>
